gainLoss(my, c(6,9:10))
gainLoss(myData, c(6,9:10))
gain_loss_matrices(myData, c(6,9:10))
gain_loss_matrices(myData, 10)
gain_loss_matrices(myData, 10, rounds="all")
gainLoss(myData, 10, rounds="all")
norm_g_l_matrices(myData, 10, rounds="all")
norm.gainLoss(myData, 10, rounds="all")
devtools::load_all(".")
norm.gainLoss(myData, 10, rounds="all")
powerful_function(myData, c(6,9:10), FUN =norm_g_l_matrices, attr = c(1:4), refps = c(1,10,100,100))
norm.gainLoss(myData, c(6,9:10), attr = c(1:4), refps = c(1,10,100,100))
norm.gainLoss(myData, c(6,9:10), attr = c(1:4), refps = c(1,10,100,100), cost_ids = 4)
powerful_function(myData, c(6,9:10), FUN =norm_g_l_matrices, attr = c(1:4), refps = c(1,10,100,100), cost_ids=4)
norm.gainLoss(myData, 10, rounds="all")
norm_g_l_matrices(myData, 10, rounds="all")
norm_g_l_matrices(myData, c(10,63),  attr=c(1,3) rounds="all")
powerful_function(myData, c(6,63), FUN =norm_g_l_matrices, attr = c(1,3), cost_ids=4)
powerful_function(myData, c(6,63), FUN =norm_g_l_matrices, attr = c(1,3), cost_ids = 3)
powerful_function(myData, c(6,63), FUN =norm_g_l_matrices, attr = c(1,3), cost_ids = 2)
powerful_function(myData, c(6,63), FUN =norm_g_l_matrices, attr = c(1,3), cost_ids = 1)
norm.gainLoss(myData, c(6,63), FUN =norm_g_l_matrices, attr = c(1,3), cost_ids = 1)
norm.gainLoss(myData, c(6,63),  attr = c(1,3), cost_ids = 1, FUN =norm_g_l_matrices)
norm.gainLoss(myData, c(6,63),  attr = c(1,3), cost_ids = 1)
powerful_function(myData, c(6,9:10), FUN =norm_g_l_matrices, attr = c(1:4), refps = c(1,10,100,100))
powerful_function(myData, c(6,6310), FUN =norm_g_l_matrices, attr = c(1:4), refps = c(1,10,100,100))
powerful_function(myData, c(6,63), FUN =norm_g_l_matrices, attr = c(1:4), refps = c(1,10,100,100))
norm.gainLoss(myData, c(6,63), attr = c(1:4), refps = c(1,10,100,100))
norm.gainLoss(myData, c(6,63), attr = c(1:4), refps = c(1,,100,))
norm.gainLoss(myData, c(6,63), attr = c(1:4), refps = c(1,100))
norm.gainLoss(myData, c(6,63), attr = c(1:4), refps = c(1,NA,100,NA))
norm.gainLoss(myData, c(6,63), attr = c(1:4), refps = c(15,NA,150,NA))
norm.gainLoss(myData, c(6,63), attr = c(1:4))
norm.gainLoss(myData, c(6,63), attr = c(1:4), rounds="all")
norm.gainLoss(myData, c(9:!0), attr = c(1:4), rounds="all")
norm.gainLoss(myData, c(9:10), attr = c(1:4), rounds="all")
norm.gainLoss(myData, c(9:10), attr = c(1:4), rounds="all", refps = c(15,NA,18,NA))
system.time(replicate(10,norm.gainLoss(myData, all.users, attr = c(1:3), rounds="all", refps = c(15,NA,18,NA))))
system.time(replicate(100,norm.gainLoss(myData, all.users, attr = c(1:3), rounds="all", refps = c(15,NA,18,NA))))
system.time(replicate(10,powerful_function(myData, all.users, FUN=norm_g_l_matrices, attr = c(1:3), rounds="all", refps = c(15,NA,18,NA))))
system.time(replicate(10,powerful_function(myData, all.users, FUN=norm_g_l_matrices, attr = c(1:3), rounds="all", refps = c(15,1,18,1))))
system.time(replicate(10,powerful_function(myData, all.users, FUN=norm_g_l_matrices, attr = c(1:3), rounds="all", refps = c(15,18))))
system.time(replicate(10,powerful_function(myData, all.users, FUN=norm_g_l_matrices, attr = c(1:3), rounds="all", refps = c(15,12,18))))
system.time(replicate(10,norm.gainLoss(myData, all.users, attr = c(1:3), rounds="all", refps = c(15,NA,18,NA))))
norm.gainLoss(myData, c(9:10), attr = c(1:3), rounds="all", refps = c(15,NA,18,NA))
powerful_function(myData, 9:10, FUN=norm_g_l_matrices, attr = c(1:3), rounds="all", refps = c(15,0,18))
pvalue_matrix(myData, 9)
pvalue_matrix(myData, 18, rounds="all")
decisionMatrix(myData, 18, rounds="all")
decisionMatrix(myData, 18)
decisionMatrix(myData, 18, rounds="all")
decisionMatrix(myData, 18, rounds="all", cost_ids=4)
pvalue_matrix(myData, 18, rounds="all", cost_ids = 4)
overall_pv(myData, 18, rounds="all", cost_ids = 4)
overall_pv(myData, 18, rounds="all", cost_ids = 4, weight=c(1,1,1,1))
system.time(replicate(10,overall_pv(myData, 18, rounds="all", cost_ids = 4)))
system.time(replicate(10,overall_pv(myData, all.users, rounds="all", cost_ids = 4)))
system.time(replicate(10,powerful_function(myData, all.users, FUN = overall_pv, rounds="all", cost_ids = 4)))
norm.gainLoss(mmyData 9)
norm.gainLoss(myData, 9)
devtools::load_all(".")
norm.gainLoss(myData, 9)
devtools::load_all(".")
norm.gainLoss(myData, 9)
devtools::load_all(".")
devtools::load_all(".")
norm.gainLoss(myData, 9)
devtools::load_all(".")
norm.gainLoss(myData, 9)
norm.gainLoss(myData, 9, rounds="all")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9, rounds="all")
devtools::load_all(".")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9, rounds="all")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9, rounds="all")
?"/"
?mapply
devtools::load_all(".")
norm.gainLoss.sep(myData, 9, rounds="all")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9, rounds="all")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9, rounds="all")
devtools::load_all(".")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9, rounds="all")
devtools::load_all(".")
identical(norm.gainLoss(myData,9,rounds="all", norm.gainLoss.sep(myData, 9, rounds="all"))
)
identical(norm.gainLoss(myData,9,rounds="all"), norm.gainLoss.sep(myData, 9, rounds="all"))
system.time(replicate(10,norm.gainLoss(myData, all.users, rounds="all")))
system.time(replicate(50,norm.gainLoss(myData, all.users, rounds="all")))
system.time(replicate(10,norm.gainLoss.sep(myData, all.users, rounds="all")))
system.time(replicate(50,norm.gainLoss.sep(myData, all.users, rounds="all")))
system.time(replicate(100,norm.gainLoss.sep(myData, all.users, rounds="all")))
system.time(replicate(100,norm.gainLoss(myData, all.users, rounds="all")))
devtools::load_all(".")
norm.gainLoss.sep(myData, all.users, rounds="all")
norm.gainLoss.sep(myData, 9)
norm.gainLoss.sep(myData, 9)[[1]]
norm.gainLoss.sep(myData, 9)[[1,]]
norm.gainLoss.sep(myData, 9)[[,1]]
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)[[,1]]
?matrix
norm.gainLoss.sep(myData, 9)[[,1]]
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)[[,1]]
norm.gainLoss.sep(myData, 9)
norm.gainLoss.sep(myData, 9)[[1]][,1]
norm.gainLoss.sep(myData, 9)[[1]][1,]
norm.gainLoss.sep(myData, 9)[[1]][2,]
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)[[1]][2,]
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)[[1]][2,]
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)[[1]][2,]
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)[[1]][2,]
norm.gainLoss.sep(myData, 9)
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)
norm.gainLoss.sep(myData, 9)[[1]]
norm.gainLoss.sep(myData, 9)[1]
norm.gainLoss.sep(myData, 9)
norm.gainLoss.sep(myData, 9)[,1]
norm.gainLoss.sep(myData, 9)[1,]
norm.gainLoss.sep(myData, 9)
length(norm.gainLoss.sep(myData, 9))
length(norm.gainLoss.sep(myData, 9)[1])
devtools::load_all(".")
length(norm.gainLoss.sep(myData, 9)[1])
length(norm.gainLoss.sep(myData, 9))
length(norm.gainLoss.sep(myData, 9:10))
length(norm.gainLoss.sep(myData, 9:10)[1])
devtools::load_all(".")
devtools::load_all(".")
length(norm.gainLoss.sep(myData, 9:10)[1])
devtools::load_all(".")
length(norm.gainLoss.sep(myData, 9:10)[1])
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)
devtools::load_all(".")
norm.gainLoss.sep(myData, 9:10)
somesome <- norm.gainLoss.sep(myData, 9:10)
length(somesome)
length(somesome[1])
length(somesome[[1]])
somesome <- norm.gainLoss.sep(myData, 9)
length(somesome[[1]])
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)
norm.gainLoss.sep(myData, 9, rounds="all")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9, rounds="all")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9, rounds="all")
norm.gainLoss.sep(myData, 9)
devtools::load_all(".")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)
devtools::load_all(".")
orm.gainLoss.sep(myData, 9)
norm.gainLoss.sep(myData, 9)
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)
devtools::load_all(".")
norm.gainLoss.sep(myData, 9)
norm.gainLoss.sep(myData, all.users)
norm.gainLoss.sep(myData, c(6,9))
norm.gainLoss.sep(myData, c(6,9), rounds="all")
devtools::load_all(".")
norm.gainLoss.sep(myData, c(6,9), rounds="all")
norm.gainLoss.sep(myData, c(9,6), rounds="all")
devtools::load_all(".")
norm.gainLoss.sep(myData, c(9,6), rounds="all")
devtools::load_all(".")
devtools::load_all(".")
norm.gainLoss.sep(myData, c(9,6), rounds="all")
norm.gainLoss.sep(myData, 9:10, rounds="all")
devtools::load_all(".")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9:10, rounds="all")
gain_matrix(myData, 9, rounds="all")
loss_matrix(myData, 9, rounds="all")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9:10, rounds="all")
loss_matrix(myData, 10, rounds="all")
devtools::load_all(".")
system.time(replicate(100,norm.gainLoss.sep(myData, all.users, rounds="all")))
system.time(replicate(100,norm.gainLoss(myData, all.users, rounds="all")))
system.time(replicate(100,norm.gainLoss(myData, all.users, rounds="all")))
system.time(replicate(100,norm.gainLoss.sep(myData, all.users, rounds="all")))
system.time(replicate(100,norm.gainLoss.sep(myData, all.users, rounds="all")))
norm.gainLoss.sep(myData, all.users, rounds="all")
norm.gainLoss.sep(myData, 9:10, rounds="all")
norm.gainLoss(myData, 9:10, rounds="all")
identical(norm.gainLoss.sep(myData, 9:10, rounds="all"),norm.gainLoss(myData, 9:10, rounds="all"))
norm.gainLoss(myData, 9:10, rounds="all")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9:10, rounds="all")
with(norm.gainLoss.sep(myData, 9:10, rounds="all"), rbind(gain, loss))
with(norm.gainLoss.sep(myData, 9:10, rounds="all"), rbind(gain[[1]], loss[[1]]))
with(norm.gainLoss.sep(myData, 9:10, rounds="all"), rbind(gain[[2]], loss[[2]]))
system.time(replicate(10,with(norm.gainLoss.sep(myData, 9:10, rounds="all"), rbind(gain[[2]], loss[[2]]))))
system.time(replicate(100,with(norm.gainLoss.sep(myData, 9:10, rounds="all"), rbind(gain[[2]], loss[[2]]))))
identical(norm.gainLoss.sep(myData, 9:10, rounds="all"),norm.gainLoss(myData, 9:10, rounds="all"))
devtools::load_all(".")
identical(norm.gainLoss.sep(myData, 9:10, rounds="all"),norm.gainLoss(myData, 9:10, rounds="all"))
identical(norm.gainLoss.sep(myData, all.users, rounds="all", cost_ids=2),norm.gainLoss(myData, all.users, rounds="all", cost_ids=2))
devtools::load_all(".")
devtools::load_all(".")
identical(norm.gainLoss.sep(myData, all.users, rounds="all", cost_ids=2),norm.gainLoss(myData, all.users, rounds="all", cost_ids=2))
devtools::load_all(".")
identical(norm.gainLoss.sep(myData, all.users, rounds="all", cost_ids=2),norm.gainLoss(myData, all.users, rounds="all", cost_ids=2))
system.time(replicate(10,norm.gainLoss.sep(myData, all.users, rounds="all")))
system.time(replicate(10,norm.gainLoss(myData, all.users, rounds="all")))
system.time(replicate(50,norm.gainLoss(myData, all.users, rounds="all")))
system.time(replicate(50,norm.gainLoss(myData, all.users, rounds="all")))
devtools::load_all(".")
system.time(replicate(10,norm.gainLoss(myData, all.users, rounds="all")))
system.time(replicate(50,norm.gainLoss(myData, all.users, rounds="all")))
system.time(replicate(50,norm.gainLoss(myData, all.users, rounds="all")))
system.time(replicate(50,norm.gainLoss(myData, all.users, rounds="all")))
system.time(replicate(100,norm.gainLoss(myData, all.users, rounds="all")))
devtools::load_all(".")
system.time(replicate(100,norm.gainLoss(myData, all.users, rounds="all")))
t1<-norm.gainLoss(myData, all.users, rounds="all")
reducedT<-norm.gainLoss(myData, all.users, rounds="all")
withoutT<-norm.gainLoss(myData, all.users, rounds="all")
devtools::load_all(".")
withT<-norm.gainLoss(myData, all.users, rounds="all")
identical(withoutT, withT)
load("C:/Users/diego/Desktop/somethingTest.rda")
rm(notTrans12)
rm(sysdata_export, sysdata_nonexport, x, t1, nonorm, reducedT)
rm(l912)
library("devtools")
source('C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/tests/testthat/testsomething.R')
devtools::load_all(".")
devtools::use_testthat()
install.packages("testthat")
camera2_config <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/camera2_config.csv")
View(camera2_config)
rm(camera2_config)
norm.gainLoss(myData, 9:10, rounds="all")
norm.gainLoss.sep(myData, 9:10, rounds="all")
devtools::load_all(".")
norm.gainLoss.sep(myData, 9:10, rounds="all")
norm.gainLoss.sep(myData, 9:10, rounds="all", binded=F)
norm.gainLoss(myData, 9:10, rounds="all", binded=F)
devtools::load_all(".")
some <- norm.gainLoss(myData, 9:10, rounds="all", binded=F)
some[[1]]
some[[1]][1]
some[[1]][2]
length(some[[1]])
with(norm.gainLoss(myData, 9:10, rounds="all", binded = F), rbind(gain[[2]], loss[[2]]))
with(norm.gainLoss(myData, 9:10, rounds="all", binded = F), lapply(gain, "+", loss))
with(norm.gainLoss(myData, 9:10, rounds="all", binded = F), mapply("+", gain, loss))
norm.gainLoss(myData, 9:10, rounds="all", binded = F)
with(norm.gainLoss(myData, 9:10, rounds="all", binded = F), mapply("*", gain, loss))
with(norm.gainLoss(myData, 9:10, rounds="all", binded = F), mapply(pvalue_fun, gain, loss))
powerful_function(myData, 9:10, rounds="all", FUN=pvalue_matrix)
devtools::load_all(".")
devtools::load_all(".")
pvMatrix(myData, 9:10, rounds="all")
lega <- powerful_function(myData, 9:10, rounds="all", FUN=pvalue_matrix)
newpv<-pvMatrix(myData, 9:10, rounds="all")
identical(lega, newpv)
equal(lega, newpv)
all.equal(lega, newpv)
sample(c("first","last","all",NULL), 1,)
sample(c("first","last","all",NULL), 1,)
all.equal(lega, newpv)
equal(lega, newpv)
all.equal(lega, newpv)
sample(c("first","last","all",NULL), 1)
sample(getAllUserIds(myData), 1)
sample(getAllUserIds(myData), 1)
devtools::load_all(".")
amountUsers <- sample(1:length(all.users))
randomUsers <- sample(all.users, amountUsers)
randoumUsers
randomUsers
devtools::load_all(".")
devtools::use_testthat()
devtools::load_all(".")
pvMatrix()
pvMatrix(myData, 9)
unname(pvMatrix(myData, 9))
powerful_function(myData,9,fun)
powerful_function(myData,9,fun=pvalue_matrix)
powerful_function(myData,9,FUN =pvalue_matrix)
powerful_function(myData,9:10,FUN =pvalue_matrix)
powerful_function(myData,9:10,FUN =pvalue_matrix, rounds="all")
unname(powerful_function(myData,9:10,FUN =pvalue_matrix, rounds="all"))
bb<-unname(powerful_function(myData,9:10,FUN =pvalue_matrix, rounds="all"))
aa<-unname(pvMatrix(myData, 9))
identical(aa,bb)
sample(c("first","last","all"), 1)
sample(1:length(all.users))
sample(all.users, amountUsers)
randomRounds <- sample(c("first","last","all"), 1)
amountUsers <- sample(1:length(all.users))
randomUsers <- sample(all.users, amountUsers)
legacyPV2 <- unname(powerful_function(camera2_config, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV2 <- unname(pvMatrix(camera2_config, randomUsers, rounds=randomRounds))
legacyPV2 <- unname(powerful_function(myData, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV2 <- unname(pvMatrix(myData, randomUsers, rounds=randomRounds))
legacyPV2
renewedPV2
devtools::load_all(".")
legacyPV2 <- unname(powerful_function(myData, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV2 <- unname(pvMatrix(myData, randomUsers, rounds=randomRounds))
devtools::load_all(".")
legacyPV2 <- unname(powerful_function(myData, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV2 <- unname(pvMatrix(myData, randomUsers, rounds=randomRounds))
devtools::load_all(".")
legacyPV2 <- unname(powerful_function(myData, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV2 <- unname(pvMatrix(myData, randomUsers, rounds=randomRounds))
amountUsers
length(amountUsers)
length(all.users)
randomUsers
length(randomUsers)
randomRounds <- sample(c("first","last","all"), 1)
amountUsers <- sample(1:length(all.users))
randomUsers <- sample(all.users, amountUsers)
randoumRounds
randomRounds
amountUsers
randomRounds <- sample(c("first","last","all"), 1)
amountUsers <- sample(1:length(all.users), 1)
randomUsers <- sample(all.users, amountUsers)
randomRounds
amountUsers
randomUsers
length(randomUsers)
randomRounds <- sample(c("first","last","all"), 1)
amountUsers <- sample(1:length(all.users), 1)
randomUsers <- sample(all.users, amountUsers)
randomRounds
amountUsers
randomRounds
randomRounds
randomUsers
pvMatrix(camera2_config, randomUsers, rounds=randomRounds)
pvMatrix(myData, randomUsers, rounds=randomRounds)
pvMatrix(myData, sort(randomUsers), rounds=randomRounds)
devtools::load_all(".")
pvMatrix(myData, sort(randomUsers), rounds=randomRounds)
pvMatrix(myData, useridsort(randomUsers), rounds=randomRounds)
pvMatrix(myData, userid=sort(randomUsers), rounds=randomRounds)
pvMatrix(myData, userid=sort(randomUsers), rounds="all")
randomUsers
decisionMatrix(myData, randomUsers)
decisionMatrix(myData, randomUsers, rounds="all")
referencePoints(myData, randomUsers, rounds="all")
referencePoints(myData, randomUsers)
norm.gainLoss(myData, randomUsers)
norm.gainLoss(myData, randomUsers, rounds="all")
norm.gainLoss(myData, randomUsers, rounds="all", binded=F)
devtools::load_all(".")
legacyPV <- unname(powerful_function(myData, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV <- unname(pvMatrix(myData, randomUsers, rounds=randomRounds))
View(legacyPV)
summary(legacyPV)
summary(renewedPV)
renewedPV
head(renewedPV)
head(legacyPV)
legacyPV <- unname(powerful_function(myData, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV <- unname(pvMatrix(myData, randomUsers, rounds=randomRounds))
legacyPV
renewedPV
powerful_function(myData, 9:10, rounds="all", FUN=pvalue_matrix)
pvMatrix(camera2_config, 9:10, rounds="all")
pvMatrix(myData, 9:10, rounds="all")
pvMatrix(myData, 9:10, rounds="all")
devtools::load_all(".")
pvMatrix(myData, 9:10, rounds="all")
legacyPV <- unname(powerful_function(myData, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV <- unname(pvMatrix(myData, randomUsers, rounds=randomRounds))
legacyPV
renewedPV
identical(legacyPV,renewedPV)
devtools::load_all(".")
randomRounds <- sample(c("first","last","all"), 1)
amountUsers <- sample(1:length(all.users), 1)
randomUsers <- sample(all.users, amountUsers)
legacyPV <- unname(powerful_function(camera2_config, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV <- unname(pvMatrix(camera2_config, randomUsers, rounds=randomRounds))
legacyPV <- unname(powerful_function(myData, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV <- unname(pvMatrix(myData, randomUsers, rounds=randomRounds))
renewedPV
legacyPV <- unname(powerful_function(myData, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV <- unname(pvMatrix(myData, randomUsers, rounds=randomRounds))
renewedPV
rm(renewedPV, legacyPV, legacyPV2, randomRounds, randomUsers)
rm(amountUsers)
randomRounds <- sample(c("first","last","all"), 1)
amountUsers <- sample(1:length(all.users), 1)
randomUsers <- sample(all.users, amountUsers)
devtools::load_all(".")
legacyPV3 <- unname(powerful_function(myData, randomUsers, rounds=randomRounds, FUN=pvalue_matrix))
renewedPV3 <- unname(pvMatrix(myData, randomUsers, rounds=randomRounds))
pvMatrix(myData, randomUsers, rounds="last")
pvMatrix(myData, 9:10, rounds="last")
?with
devtools::load_all(".")
pvMatrix(myData, 9:10, rounds="last")
rm(randomRounds, randomUsers, amountUsers, renewedPV2, renewedPV3, lega, legacyPV3)
devtools::load_all(".")
identical(unname(pvalue_matrix(myData, 9)),unname(pvMatrix(myData, 9)))
pvalue_matrix(myData, 9)
pvMatrix(myData, 9)
all.equal(unname(pvalue_matrix(myData, 9)),unname(pvMatrix(myData, 9)))
all.equal(unname(list(pvalue_matrix(myData, 9))),unname(pvMatrix(myData, 9)))
devtools::load_all(".")
overallPV(myData, 9)
devtools::load_all(".")
overallPV(myData, 9)
overallPV(myData, 9, rounds="all")
overall_pv(myData, 9, rounds="all")
devtools::load_all(".")
overall_pv(myData, 9, rounds="all")
overallPV(myData, 9, rounds="all")
overallPV(myData, 9:11, rounds="all")
devtools::load_all(".")
overallPV(myData, 9:11, rounds="all")
ww <- get_attr_weight(myData, 9, rounds="all")
ww
overallPV(myData, 9:11, rounds="all")
powerful_function(myData, 9:11, FUN=overall_pv, rounds="all", weight=ww)
powerful_function(myData, 18, FUN=overall_pv, rounds="all")
overallPV(myData, 18, rounds="all")
system.time(replicate(10,powerful_function(myData, 18, FUN=overall_pv, rounds="all")))
system.time(replicate(10,overallPV(myData, 18, rounds="all")))
system.time(replicate(10,overallPV(myData, 18, rounds="all")))
devtools::load_all(".")
system.time(replicate(10,overallPV(myData, 18, rounds="all")))
system.time(replicate(10,overallPV(myData, 18, rounds="all")))
system.time(replicate(10,overallPV(myData, 18, rounds="all")))
system.time(replicate(100,overallPV(myData, 18, rounds="all")))
system.time(replicate(100,powerful_function(myData, 18, FUN=overall_pv, rounds="all")))
head(powerful_function(myData, all.users, FUN=overall_pv, rounds="all"))
head(overallPV(myData, all.users, rounds="all", weight = (0.25,0.25,0.25,0.25)))
head(overallPV(myData, all.users, rounds="all", weight = c(0.25,0.25,0.25,0.25)))
head(powerful_function(myData, all.users, FUN=overall_pv, rounds="all",(0.25,0.25,0.25,0.25)))
head(powerful_function(myData, all.users, FUN=overall_pv, rounds="all",weight=c(0.25,0.25,0.25,0.25)))
head(overallPV(myData, all.users, rounds="all", weight = (0.25,0.25,0.25,0.25)))
head(overallPV(myData, all.users, rounds="all", weight = c(0.25,0.25,0.25,0.25)))
hnew <- unname(head(overallPV(myData, all.users, rounds="all", weight = c(0.25,0.25,0.25,0.25))))
hold <- unname(head(powerful_function(myData, all.users, FUN=overall_pv, rounds="all",weight=c(0.25,0.25,0.25,0.25))))
identical(hnew, hold)
get_attr_weight(myData, 9)
get_attr_weight(myData, 10)
powerful_function(myData, 9:15, FUN=get_attr_weight)
decisionMatrix(myData, 11)
decisionMatrix(myData, 11, rounds="all")
?df
?diff
diff(1:10, 2)
diff(1:7, 2)
diff(1:10, 2,2)
?rep
rep(1,10)
diff(rep(1,10), 2,2)
diff(rep(1,10), 2)
diff(rep(1,10))
diff(rep.int(1,10))
?diff
dec11 <- decisionMatrix(myData, 11, rounds="all")
dec11
apply(dec11, 2, diff)
apply(dec11[[1]], 2, diff)
diffMatrix11 <- apply(dec11[[1]], 2, diff)
diffMatrix11 <- apply(diffMatrix11, 2, abs)
diffMatrix11
sumdiffMatrix11 <- apply(diffMatrix11, 2, sum)
sumdiffMatrix11
ndec11 <- (myData, 11, rounds="all")[[1]]
ndec11 <- (myData, 11, rounds="all")
ndec11 <- norm.gainLoss(myData, 11, rounds="all")
ndec11
ndiffMatrix11 <- apply(ndec11[[1]], 2, diff)
ndiffMatrix11
nabsdiffMatrix11 <- apply(ndiffMatrix11, 2, abs)
nabsdiffMatrix11
nsumdiffMatrix11 <- apply(ndiffMatrix11, 2, sum)
nsumdiffMatrix11
nsumdiffMatrix11 <- apply(nabsdiffMatrix11, 2, sum)
nsumdiffMatrix11
decisionMatrix(myData, 11, rounds="all")
norm.gainLoss(myData, 11, rounds="all")
ndec11 <- norm.gainLoss(myData, 11, rounds="all")
ndec$gain
ndec11 <- norm.gainLoss(myData, 11, rounds="all", binded = F)
ndec11
ndec11$loss
ndec11$gain
