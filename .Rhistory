dm9nocost <- decisionMatrix(myData, c(9), rounds="all", cost_ids = 4)[[1]]
apply(dm9nocost, 2, function(t) t/sum(t))
dm9norm <- apply(dm9nocost, 2, function(t) t/sum(t))
we9old
entropy(dm9norm)
differenceToIdeal(dm9norm)
differenceToIdeal(dm9norm, attr=1:4)
weight.entropy(myData, 9, rounds="all")
?sd
devtools::load_all(".")
standardDeviation(dm9norm)
weight.entropy(myData, 9, rounds="all")
differenceToIdeal(dm9norm, attr=1:4)
dm9
devtools::load_all(".")
weight.standard(myData, 9, rounds="all")
weight.standard(myData, all.users, rounds="all")
devtools::load_all(".")
weight.standard(myData, 9, rounds="all")
standardDeviation(d9norm)
standardDeviation(dm9norm)
weight.standard(myData, 9, rounds="all", cost_ids = 4)
d9norm
normalize(myData, 9, rounds="all", cost_ids = 4)
d9
dm9
normalize(dm9)
normalize.altMethod(dm9)
dm9norm
weight.standard(myData, all.users, rounds="all", cost_ids=4)
weight.differenceToIdeal(myData, all.users, rounds="all", cost_ids=4)
weight.standard(myData, all.users, rounds="all", cost_ids=4)
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
decisionMatrix(myData, 14, rounds="all")
devtools::load_all(".")
devtools::load_all(".")
dm9
normalize.minMax(dm9)
devtools::load_all(".")
normalize.minMax(dm9)
normalize.minMax(dm9, cost_ids=4)
normalize.minMax(dm9, attr = 1:4,cost_ids=4)
devtools::load_all(".")
normalize.minMax(dm9, attr = 1:4,cost_ids=4)
dm9
devtools::load_all(".")
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
weight.entropy(myData, all.users, rounds="all")
devtools::load_all(".")
weight.differenceToIdeal(myData, all.users, rounds="all", cost_ids=4)
weight.differenceToIdeal(myData, all.users, rounds="all")
devtools::load_all(".")
normalize.minMax(dm9, attr = 1:4,cost_ids=4)
normalize.minMax(dm9, attr = 1:4)
dm99 <- decisionMatrix(myData,9)
dm99
dm99 <- decisionMatrix(myData,9)[[1]]
dm99
normalize.minMax(dm99, attr = 1:4)
dm99 <- decisionMatrix(myData,9, rounds="all")[[1]]
dm99
normalize.minMax(dm99, attr = 1:4, cost_ids=4)
normalize.altMethod(dm99, attr = 1:4, cost_ids=4)
dm99alt <- normalize.altMethod(dm99, attr = 1:4, cost_ids=4)
dm99minMax <- normalize.minMax(dm99, attr = 1:4, cost_ids=4)
entropy(dm99alt)
weight.entropy(myData, 9, rounds="all", cost-ids=4)
weight.entropy(myData, 9, rounds="all", cost_ids=4)
entropy(dm99minMax)
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
dm9
normalize.minMax(dm9)
devtools::load_all(".")
normalize.minMax(dm9)
?apply
devtools::load_all(".")
normalize.minMax(dm9)
dm9
?apply
?"/"
devtools::load_all(".")
normalize.minMax(dm9)
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
weight.standard(myData, all.users, rounds="all", cost_ids=4)
weight.differenceToIdeal(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
devtools::load_all(".")
weight.differenceToIdeal(myData, all.users, rounds="all", cost_ids=4)
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
dm9
weight.entropy(myData, 9, rounds="all", cost_ids=4)
weight.differenceToIdeal(myData, 9, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, 9, rounds="all", cost_ids=4)
weight.standard(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
getAttrValues(myData)
dm9
normalize.altMethod(dm9)
normalize.altMethod(dm9,1:4, cost_ids=4)
devtools::load_all(".")
weight.differenceToIdeal(myData,9, rounds="all", cost_ids)
weight.differenceToIdeal(myData,9, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.differenceToIdeal(myData,9, rounds="all", cost_ids=4)
lapply(getAttrValues(myData, 1:4, max))
lapply(getAttrValues(myData, max,  1:4))
lapply(getAttrValues(myData), max,  1:4))
lapply(getAttrValues(myData), max,  1:4)
lapply(getAttrValues(myData), max)
lapply(getAttrValues(myData, 1:4), max)
lapply(getAttrValues(myData, 1:4), max)
lapply(getAttrValues(myData, 1:4), min)
get_attr_values(myData)
get_attr_values(myData, 1:4)
get_attr_values(myData, 1)
dm9
c(1,3)
rbind(c(1,3),2:3)
class(rbind(c(1,3),2:3))
testM <- rbind(c(1,3),2:3)
rbind(testM, testM, testM)
testM <- rbind(testM, testM, testM)
testM[-1,]
testM[-1:2,]
testM[-c(1,2),]
lapply(getAttrValues(myData, 1:4), max)
sapply(getAttrValues(myData, 1:4), max)
sapply(getAttrValues(myData, 4:1), max)
maxmax <- sapply(getAttrValues(myData, 4:1), max)
minmin <- sapply(getAttrValues(myData, 4:1), min)
maxmax
minmin
dm9
dm9binded <- rbind(maxmax, minmin, dm9)
dm9binded
?rbind
minmin <- sapply(getAttrValues(myData, 1:4), min)
minmin <- sapply(getAttrValues(myData, 1:4), min)
dm9binded <- rbind(maxmax, minmin, dm9)
dm9binded
maxmax <- sapply(getAttrValues(myData, 1:4), max)
dm9binded <- rbind(maxmax, minmin, dm9)
dm9binded
devtools::load_all(".")
weight.highestValue(myData, 9:10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 9:10, rounds="all")
?sapply
devtools::load_all(".")
weight.highestValue(myData, 9:10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 9:10, rounds="all")
sapply(getAttrValues(myData, 1:4), min, USE.NAMES = T)
weight.highestValue(myData, 9:12, rounds="all")
weight.highestValue(myData, 9:12, rounds="first")
matrix(1,3,3,)
matrix(1,3,3)
matrix(1,3,4)
weight.highestValue(myData, 9:10, rounds="all")
devtools::load_all(".")
dm9
normalize.highestValue(dm9)
devtools::load_all(".")
normalize.highestValue(dm9)
dm9nocost <- decision_matrix(myData,9,rounds="all")
dm9nocost
normalize.highestValue(dm9nocost)
normalize.highestValue(dm9nocost, cost_ids = 4)
normalize.highestValue(dm9nocost, 4)
devtools::load_all(".")
normalize.highestValue(dm9nocost, 4)
normalize.highestValue(dm9nocost)
devtools::load_all(".")
normalize.highestValue(dm9nocost)
dm9binded
maxmax
minmin
dm9binded <- rbind(maxmax, minmin, dm9nocost)
dm9binded
devtools::load_all(".")
normalize.highestValue(dm9nocost)
normalize.highestValue(dm9binded)
normalize.highestValue(dm9binded, 4)
normalize.highestValue(dm9binded)
normalize.highestValue(dm9binded, 1:4, 4)
devtools::load_all(".")
normalize.highestValue(dm9binded, 1:4, 4)
devtools::load_all(".")
normalize.highestValue(dm9binded, 1:4, 4)
devtools::load_all(".")
normalize.highestValue(dm9binded, 1:4, 4)
normalize.highestValue(dm9binded)
normalize.highestValue(dm9binded)
dm9binded
normalize.highestValue(dm9binded, 1:4, 4)
weight.highestValue(myData, 9, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.highestValue(myData, 9, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.highestValue(myData, 9, attr=1:4, rounds="all", cost_ids=4)
weight.highestValue(myData, 9:10, attr=1:4, rounds="all", cost_ids=4)
decisionMatrix(myData, 10)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=4)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=3)
devtools::load_all(".")
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=4)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=3)
weight.highestValue(myData, 9:10, attr=1:3, rounds="first", cost_ids=3)
devtools::load_all(".")
weight.highestValue(myData, 9:10, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 9:10, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=3)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
weight_higher_sum_value(myData, 9, rounds="all")
getAttrWeights(myData, 9, rounds="all")
devtools::load_all(".")
getAttrWeights(myData, 9, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, all.users, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.highestValue(myData, 9, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 10, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 10, attr=1:3, rounds="all", cost_ids=3)
dm10norm <- weight.highestValue(myData, 10, attr=1:3, rounds="all", cost_ids=4)[[1]]
dm10norm <- weight.highestValue(myData, 10, attr=1:4, rounds="all", cost_ids=4)[[1]]
dmnorm10
dm10norm
highestValue(dm10norm)
decisionMatrix(myData, 10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all")
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, attr=1:4,rounds="all", cost_ids = 4)
weight.highAndStandard(myData, 10, attr=1:4,rounds="all", cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
weight.highAndStandard(myData, 10, attr=1:4,rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, attr=1:4 rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, attr=1:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
get_attrs_ID(myData)
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all", cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all")
weight.highestValue(myData, all.users, rounds="all", gamma=0.8)
weight.highestValue(myData, all.users, rounds="all")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
decisionMatrix(myData, 58:63, rounds="all",cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all")
weight.highestValue(myData, all.users, rounds="all", cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
weight.highAndStandard(myData, 6, rounds="all", cost_ids = 4)
weight.highAndStandard(myData, all.users, rounds="all", cost_ids = 4)
weight.highAndStandard(myData, all.users, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:3, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:3, rounds="all")
weight.highestValue(myData, 61:62, attr=2:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:4, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, attr=1:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=2:4, rounds="all", cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
trp10.13
trpValueMatrix(myData, 9:10, rounds="all")
decisionMatrix(myData, 9:10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 9:10, rounds="all")
trpValueMatrix(myData, 9:10, rounds="all")
decisionMatrix(myData, 9:10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 9:10, rounds="all")
trpValueMatrix(myData, 10, rounds="all")
decisionMatrix(myData, 10, rounds="all")
decisionMatrix.oneAttr(myData, 10, rounds="all", attr=1)
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
devtools::load_all(".")
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
devtools::load_all(".")
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
decisionMatrix(myData, 10, rounds="all", attr=1)
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
devtools::load_all(".")
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
trpValueMatrix(myData, 10, rounds="all", attr=1, cost_ids=4)
trpValueMatrix(myData, 10, rounds="all", attr=1)
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
library(productConfig)
?trp
?trpValueMatrix
devtools::load_all(".")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
source('C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/R/GainsAndLosses.R')
?apply
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
View(aa)
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
aa
aaa
dm10
camera_data <- myData
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(norm.gainLoss)
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
round(1.111111, 2)
lapply(getAttrValues(dataset = camera_data), round, 8)
lapply(getAttrValues(dataset = camera_data), round, 7)
lapply(getAttrValues(dataset = camera_data), round, 8)
sample(all.users, 1)
decisionMatrix(camera_data,52)
decisionMatrix(camera_data,sample(all.users, 1))
decisionMatrix(camera_data,sample(all.users, 1))
decisionMatrix(camera_data,sample(all.users, 1))
decisionMatrix(camera_data,sample(all.users, 1))
devtools::load_all(".")
weight.highAndStandard(myData, 33, rounds="all", cost_ids=4)
weight.entropy(myData, 33, rounds="all", cost_ids=4)
weight.differenceToIdeal(myData, 33, rounds="all", cost_ids=4)
?entropy
entropy
devtools::load_all(".")
differenceToIdeal(decisionMatrix(camera_data, 33, attr=1:4, rounds="all",                                         cost_ids = 4), 1:4)
differenceToIdeal(decisionMatrix(camera_data, 33, attr=1:4, rounds="all",                                         cost_ids = 4)[[1]], 1:4)
decisionMatrix(camera_data, 33, attr=1:4, rounds="all",                                         cost_ids = 4)[[1]]
weight.differenceToIdeal(camera_data, 33, attr=1:4, rounds="all",                                         cost_ids = 4)
devtools::load_all(".")
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/testDataNewDRPandTRP.RData")
overallTRP(myData, 10, rounds="all", cost_ids=4, tri.refps=triRefps14 )
trp.valueMatrix(myData, 10, rounds="all", cost_ids=4, tri.refps=triRefps14 )
trp10.full
weight.differenceToIdeal(myData, 10, rounds="all", cost_ids=4)
weiwei <-weight.differenceToIdeal(myData, 10, rounds="all", cost_ids=4)
overall_pv_extend(trp10full, weiwei)
overall_pv_extend(trp10.full, weiwei)
overall_pv_extend(trp10.full, weiwei[[1]])
weiwei
weiwei[[1]]
weiwei <- weiwei[[1]]
lapply(trp10.full, overall_pv_extend, weiwei[[1]])
lapply(trp10.full, overall_pv_extend, weiwei[[1]])
overall_pv_extend(trp10.full[[1]], weiwei[[1]])
length(weiwei[[1]])
weiwei
overall_pv_extend(trp10.full[[1]], weiwei)
trp.valueMatrix(myData, 10, rounds="all", cost_ids=4, tri.refps=triRefps14 )
overallTRP(myData, 10, rounds="all", cost_ids=4, tri.refps=triRefps14 )
overallDRP(myData, 10, rounds="all", cost_ids=4, tri.refps=dualRefps13)
overallDRP(myData, 10, rounds="all", cost_ids=4, dual.refps=dualRefps13)
dual.valueMatrix(myData, 10, rounds="all", cost_ids=4, dual.refps=dualRefps13)
devtools::load_all(".")
dual.valueMatrix(myData, 10, rounds="all", cost_ids=4, dual.refps=dualRefps13)
dual.valueMatrix(myData, 10, rounds="all", attr=1:3, cost_ids=4, dual.refps=dualRefps13)
dual.valueMatrix(myData, 10, rounds="all", attr=1:4, cost_ids=4, dual.refps=dualRefps13)
devtools::load_all(".")
dual.valueMatrix(myData, 10, rounds="all", attr=1:4, cost_ids=4, dual.refps=dualRefps13)
devtools::load_all(".")
devtools::load_all(".")
dual.valueMatrix(myData, 10, rounds="all", attr=1:4, cost_ids=4, dual.refps=dualRefps13)
devtools::load_all(".")
repeat(1:2,3)
repeat(3,1:3)
repeat(3)
?repeat
?rep
rep(c(1.5, 2.5), 3)
dualPoints <- matrix(c(sq=1.5,g=2.5,  1.5,2.5,  1.5,2.5,  0.17,-0.10),
nrow=4, ncol=2, byrow=TRUE)
dualPoints
triPoints <-  matrix(c(mr=0.5,sq=1.5,g=2.5,  0.5,1.5,2.5,  0.5,1.5,2.5,  0.40,0.17,-0.10),
nrow=4, ncol=3, byrow=TRUE)
triPoints
names(dualPoints) <- c(c("sq, g"), c("attr1", "attr2", "attr3", "attr4"))
dualPoints
dualPoints
dualPoints <- matrix(c(sq=1.5,g=2.5,  1.5,2.5,  1.5,2.5,  0.17,-0.10),
nrow=4, ncol=2, byrow=TRUE)
colnames(dualPoints) <- c("sq, g")
colnames(dualPoints) <- c("sq", "g")
dualPoints
devtools::load_all(".")
?cat
cat(dualPoints, triPoints)
cat(dualPoints, triPoints, fill=T)
cat(dualPoints, triPoints, fill=F)
devtools::load_all(".")
devtools::load_all(".")
overallDRP(camera_data, 33, attr=1:4, rounds="all", cost_ids = 4, weightFUN="entropy",
dual.refps = dualPoints, lambda = 2.25, delta = 0.8)
decisionMatrix(myData, 33, rounds="all", cost_ids=4)
overallTRP(camera_data, 33, rounds="all", cost_ids = 4, weightFUN="entropy",
tri.refps = triPoints, beta_f = 5,beta_l = 1,beta_g = 1,beta_s = 3)
overallTRP(camera_data, all.users, rounds="all", cost_ids = 4, weightFUN="entropy",
tri.refps = triPoints, beta_f = 5,beta_l = 1,beta_g = 1,beta_s = 3)
devtools::load_all(".")
weight.differenceToIdeal(camera_data, 33, attr=1:4, rounds="all", cost_ids = 4)
weight.highAndStandard(camera_data, 33, attr=1:4, rounds="all", cost_ids = 4)
weight.differenceToIdeal(camera_data, 33, attr=1:4, rounds="all", cost_ids = 4)
weight.entropy(camera_data, 33, attr=1:4, rounds="all", cost_ids = 4)
devtools::load_all(".")
overallDRP(full_data, 6:7 ,attr = c(1,2,3), rounds="all", dual.refps=matrix(1:4, 2, 2, byrow=T))
overallDRP(myData, 6:7 ,attr = c(1,2,3), rounds="all", dual.refps=matrix(1:4, 2, 2, byrow=T))
overallDRP(myData, 9:10 ,attr = c(1,2,3), rounds="all", dual.refps=matrix(1:4, 2, 2, byrow=T))
overallDRP(myData, 9:10 ,attr = c(1,2,3), rounds="all", dual.refps=matrix(1:6, 3, 2, byrow=T))
devtools::load_all(".")
overallTRP(full_data, 6:7 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
overallTRP(myData, 6:7 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
overallTRP(full_data, 9:10 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
overallTRP(myData, 9:10 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
getAllUserIds(myData)
overallTRP(full_data, 30:35 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
overallTRP(myData, 30:35 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
overallTRP(myData, userid = 100, rounds = "all", attr=3:4, tri.refps=matrix(1:9, 2, 3, byrow=T))
overallTRP(myData, userid = 58, rounds = "all", attr=3:4, tri.refps=matrix(1:9, 2, 3, byrow=T))
overallTRP(myData, userid = 58, rounds = "all", attr=3:4, tri.refps=matrix(1:6, 2, 3, byrow=T))
devtools::load_all(".")
sapply(overallTRP(camera4, users4, attr=1:4, rounds="all", cost_ids=4, tri.refps = full.tri.refps, weightFUN = "highAndStandard", gamma=0.7), function(xyz) max.col(matrix(xyz,nrow=1),"last"))
sapply(overallTRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4, tri.refps = full.tri.refps, weightFUN = "highAndStandard", gamma=0.7), function(xyz) max.col(matrix(xyz,nrow=1),"last"))
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
sapply(overallTRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4, tri.refps = full.tri.refps, weightFUN = "highAndStandard", gamma=0.7), function(xyz) max.col(matrix(xyz,nrow=1),"last"))
sampleHighTRP <- sapply(overallTRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4, tri.refps = full.tri.refps, weightFUN = "highAndStandard", gamma=0.7), function(xyz) max.col(matrix(xyz,nrow=1),"last"))
full.tri.refps
lastR <- <- sapply(getRoundsById(myData, all.users), length)
lastR  <- sapply(getRoundsById(myData, all.users), length)
length(which(lastR == sampleHighTRP))
29/51
devtools::load_all(".")
devtools::load_all(".")
trpValueFunction_extend
source("R/TRPFunctions.R")
trpValueFunction_extend
sampleHighTRP <- sapply(overallTRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4, tri.refps = full.tri.refps, weightFUN = "highAndStandard", gamma=0.7), function(xyz) max.col(matrix(xyz,nrow=1),"last"))
length(which(lastR == sampleHighTRP))
