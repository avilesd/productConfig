% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ReferencePoints.R
\name{ref_points}
\alias{ref_points}
\title{Delivers the Reference Points}
\usage{
ref_points(dataset, userid, refps = NULL, attr = NULL, cost_ids = NULL,
  ...)
}
\arguments{
\item{dataset}{cdata.frame with the user generated data from a product
configurator. Please see \code{decision_matrix} for specifications of the
data.frame.}

\item{userid}{an integer that gives the information of which user the
reference points should be determined.}

\item{refps}{numeric vector. Reference Points: each point corresponds to one
attribute, i.e. each attribute has only one aspiration level. Default
setting assumes the aspiration levels as the default values of the initial
product configuration for each user.}

\item{attr}{attributes IDs, vector of integer numbers corresponding to the
attributes you desire to use; attr are assumed to be 1-indexed.}

\item{cost_ids}{argument used to convert selected cost attributes into
benefit attributes. Integer vector.}
}
\value{
reference points. A numeric vector with default values if nothing is
  given or the ones inputed by the user. For one specific user only.
}
\description{
This function delivers reference points for other functions to use. With the
reference points you can calculate gains and losses relative to a reference
point. We base our knowledge and assumptions to calculate gains and losses
from a paper, please see source and references. Reference Points can be many
things, such as defaults, aspiration levels, status quo, etc. Here we provide
the tools to read the reference points from the given data, i.e. reference
points as default values. We also provide the tools for the user of this
package to provide the refps to the funciton and use those to calculate
further matrices and value functions.
}
\details{
\code{dataset} We assume the input data.frame has following columns
usid = User IDs, round = integers indicating which round the user is in
(0-index works best for round), atid = integer column for referring the
attribute ID (1 indexed), selected = numeric value of the attribute for a
specific, given round, selectable = amount of options the user can chose at a
given round, with the current configuration. This is a necessary parameter.

\code{userid} is a necessary parameter, without it you'll get a warning.
Default is NULL.

\code{refps} The most important parameter for this function. If you only want
to see the results for one attribute you may enter only a couple of reference
points but you have to tell the function which attributes you want to use
those referene points for. So the amount of attr and of refps should be the
same. Moreover the functions always orders de attr, so be sure to input the
reference point also in an ascending order corresponding to their attributes.
(refps will not be ordered)

\code{attr} Default calculates with all attributes. Attributes are
automatically read from provided table, it is important you always provide
the complete dataset so that the package functions properly. Moreover the
attribute will be sorted in ascending order, i.e. if you input attr=
c(1,3,2), the decision matrix resulting will display the columns in order:
attr1 attr2 attr3. You may input fewer attributes than there are on your
data.

\code{cost_ids} To identify cost type attributes, i.e. a lower value is
better for the user of the product configurator.

Keep in mind you will probably not use this function on itself, it will
receive its parameters from a parent funciton, that is why is it not fully
documented.
}
\examples{
ref_points(play_data, 9)
ref_points(play_data, 9, attr=c(1,3)) # returns numeric vector with length 2.
ref_points(play_data, 9, attr=c(1,3,4,2)) # returns numeric vector with length 4.
ref_points(data, 6, refps=c(0,-10,9,2)) # since there are exactly 4 attributes in 'data' this input is accepted.
ref_points(data, 20, refps=c(1,1), attr=c(1,2)) # Also works, since equal amount of refps and attr elements.

#Some examples that throw an error
ref_points(data, 4, refps=c(1,2)) # Does not work since number of attributes in this case (4) does not equal number of refps.
ref_points(data, refps=c(0,0,0), attr=c(1,4)) # Same error as previous example

}

