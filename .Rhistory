devtools::load_all(".")
devtools::load_all(".")
find_rtools()
library(devtools)
find_rtools(T)
>>>>>>> 2f712c7547595327b8680eba7969ab4c913cab30
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
dm10
getAttrWeights(myData, 10, attr =1:4, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")
devtools::load_all(".")
getAttrWeights(myData, 10, attr =1:4, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")
getAttrWeights(myData, 10, attr =1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
getAttrWeights(myData, 10, attr =1:4, rounds="all", cost_ids=4)
getAttrWeights(myData, 10, attr =1:4, rounds="all", cost_ids=4, weightFUN = "deprecated_FUN")
devtools::load_all(".")
getAttrWeights(myData, 10, attr =1:4, rounds="all", cost_ids=4, weightFUN = "deprecated_FUN")
getAttrWeights(myData, 10, attr =1:4, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")
dm10
weight.entropy(myData, 10, attr=1:4, rounds="all", cost_ids=4)
weight.entropy(myData, 16, attr=1:4, rounds="all", cost_ids=4)
weight.entropy(myData, 18, attr=1:4, rounds="all", cost_ids=4)
fillMatrix
View(entropy_matrix1)
entropy_matrix1
?entropy
help(entropy)
entropy
entropy_matrix1
entropy(entropy_matrix1)
entropy_matrixTest <- entropy_matrix1
entropy_matrixTest[,5] <- c(0.25,0.25,0.25,0.25)
entropy(entropy_matrixTest)
entropy_matrixTest[,5] <- c(0.25,0.25,0.25,0.24)
entropy_matrixTest
entropy(entropy_matrixTest)
devtools::load_all(".")
dm10
weight.entropy(myData, 10, attr=1:4, rounds="all", cost_ids=4)
weight.entropy(myData, 16, attr=1:4, rounds="all", cost_ids=4)
weight.entropy(myData, 18, attr=1:4, rounds="all", cost_ids=4)
weight.entropy(myData, 18, attr=1:4, rounds="all")
decisionMatrix(myData, 18, rounds="all")
entropy(decisionMatrix(myData, 18, rounds="all")[[1]])
normalize.altMethod(decisionMatrix(myData, 18, rounds="all")[[1]])
normDM18 <- normalize.altMethod(decisionMatrix(myData, 18, rounds="all")[[1]])
entropy(normDM18)
weight.entropy(myData, 18, attr=1:4, rounds="all")
eentropy_matrix1
entropy_matrix1
devtools::load_all(".")
entropy(entropy_matrix1)
entropy(normDM18)
weight.entropy(myData, 6, attr=1:4, rounds="all")
weight.entropy(myData, 18, attr=1:4, rounds="all")
devtools::load_all(".")
weight.entropy(myData, 18, attr=1:4, rounds="all")
dm18
dm18 <- decisionMatrix(myData, 18, rounds="all")
dm18
devtools::load_all(".")
weight.entropy(myData, 18, attr=1:4, rounds="all")
devtools::load_all(".")
weight.entropy(myData, 18, attr=1:4, rounds="all")
dm18
devtools::load_all(".")
weight.entropy(myData, 18, attr=1:4, rounds="all")
devtools::load_all(".")
weight.entropy(myData, 18, attr=1:4, rounds="all")
weight.entropy(myData, all.users, attr=1:4, rounds="all")
devtools::load_all(".")
weight.entropy(myData, all.users, attr=1:4, rounds="all")
decisionMatrix(myData, all.users, attr=1:4, rounds="all")
weight.entropy(myData, all.users, attr=1:4, rounds="all")
weight.entropy(myData, all.users, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.entropy(myData, all.users, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.entropy(myData, all.users, attr=1:4, rounds="all")
decisionMatrix(myData, c(58,62), attr=1:4, rounds="all")
normalize.altMethod(decisionMatrix(myData, c(58,62), attr=1:4, rounds="all")[[1]])
weight.entropy(myData, all.users, attr=1:4, rounds="all")
decisionMatrix(myData, all.users, attr=1:4, rounds="all")
decisionMatrix(myData, 53, attr=1:4, rounds="all")
weight.differenceToIdeal(myData, 53, attr=1:4, rounds="all")
weight.entropy(myData, 53, attr=1:4, rounds="all")
normalize.altMethod(decisionMatrix(myData, 53, attr=1:4, rounds="all")[[1]])
weight.entropy(myData, all.users, attr=1:4, rounds="all", cost_ids=4)
decisionMatrix(myData, 42, attr=1:4, rounds="all")
weight.entropy(myData, 42, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.entropy(myData, 42, attr=1:4, rounds="all", cost_ids=4)
weight.entropy(myData, 39, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.entropy(myData, 39, attr=1:4, rounds="all", cost_ids=4)
decisionMatrix(myData, 39, attr=1:4, rounds="all", cost_ids=4)
c(1,1.2,1.5,1.7,2.05)
vecvect <- c(1,1.2,1.5,1.7,2.05)
sumsum <- sum(vecvect)
vecvect/sumsum
vecvect2 <- c(1,1.2,1.5,1.7,2.05)*10
vecvect2
vecvect2 <- c(1,1.2,1.5,1.7,2.05)+11
vecvect2
vecvect2 <- c(1,1.2,1.5,1.7,2.05)+10
vecvect2
sumsum2 <- sum(vecvect2)
sumsum2/vecvect2
vecvect2/sumsum2
vecvect/sumsum
vecvect2 <- c(1,1.2,1.5,1.7,2.05)+1000
sumsum2 <- sum(vecvect2)
vecvect2/sumsum2
vecvect
costTest <- c(-0.75,-0.4,-0.2,0.1,0.33)
costTest
min(costTest)
minTest <- min(costTest)
minTest/costTest
decisionMatrix(myData, all.users, rounds="all", cost_ids=4)
decisionMatrix(myData, all.users, rounds="all")
weight.entropy(myData, 6, rounds="all")
weight.entropy(myData, 6, rounds="all", cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
weight.entropy(myData, 6, rounds="all", cost_ids = 4)
weight.entropy(myData, c(9,31), rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.entropy(myData, c(9,31), rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.entropy(myData, c(9,31), rounds="all", cost_ids = 4)
weight.entropy(myData, c(9), rounds="all", cost_ids = 4)[[1]]
we9old <- weight.entropy(myData, c(9), rounds="all", cost_ids = 4)[[1]]
dm9 <- decisionMatrix(myData, c(9), rounds="all", cost_ids = 4)[[1]]
dm9
apply(dm, 2, function(t) t/sum(t))
apply(dm9, 2, function(t) t/sum(t))
dm9nocost <- decisionMatrix(myData, c(9), rounds="all", cost_ids = 4)[[1]]
apply(dm9nocost, 2, function(t) t/sum(t))
dm9norm <- apply(dm9nocost, 2, function(t) t/sum(t))
we9old
entropy(dm9norm)
differenceToIdeal(dm9norm)
differenceToIdeal(dm9norm, attr=1:4)
weight.entropy(myData, 9, rounds="all")
?sd
devtools::load_all(".")
standardDeviation(dm9norm)
weight.entropy(myData, 9, rounds="all")
differenceToIdeal(dm9norm, attr=1:4)
dm9
devtools::load_all(".")
weight.standard(myData, 9, rounds="all")
weight.standard(myData, all.users, rounds="all")
devtools::load_all(".")
weight.standard(myData, 9, rounds="all")
standardDeviation(d9norm)
standardDeviation(dm9norm)
weight.standard(myData, 9, rounds="all", cost_ids = 4)
d9norm
normalize(myData, 9, rounds="all", cost_ids = 4)
d9
dm9
normalize(dm9)
normalize.altMethod(dm9)
dm9norm
weight.standard(myData, all.users, rounds="all", cost_ids=4)
weight.differenceToIdeal(myData, all.users, rounds="all", cost_ids=4)
weight.standard(myData, all.users, rounds="all", cost_ids=4)
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
decisionMatrix(myData, 14, rounds="all")
devtools::load_all(".")
devtools::load_all(".")
dm9
normalize.minMax(dm9)
devtools::load_all(".")
normalize.minMax(dm9)
normalize.minMax(dm9, cost_ids=4)
normalize.minMax(dm9, attr = 1:4,cost_ids=4)
devtools::load_all(".")
normalize.minMax(dm9, attr = 1:4,cost_ids=4)
dm9
devtools::load_all(".")
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
weight.entropy(myData, all.users, rounds="all")
devtools::load_all(".")
weight.differenceToIdeal(myData, all.users, rounds="all", cost_ids=4)
weight.differenceToIdeal(myData, all.users, rounds="all")
devtools::load_all(".")
normalize.minMax(dm9, attr = 1:4,cost_ids=4)
normalize.minMax(dm9, attr = 1:4)
dm99 <- decisionMatrix(myData,9)
dm99
dm99 <- decisionMatrix(myData,9)[[1]]
dm99
normalize.minMax(dm99, attr = 1:4)
dm99 <- decisionMatrix(myData,9, rounds="all")[[1]]
dm99
normalize.minMax(dm99, attr = 1:4, cost_ids=4)
normalize.altMethod(dm99, attr = 1:4, cost_ids=4)
dm99alt <- normalize.altMethod(dm99, attr = 1:4, cost_ids=4)
dm99minMax <- normalize.minMax(dm99, attr = 1:4, cost_ids=4)
entropy(dm99alt)
weight.entropy(myData, 9, rounds="all", cost-ids=4)
weight.entropy(myData, 9, rounds="all", cost_ids=4)
entropy(dm99minMax)
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
dm9
normalize.minMax(dm9)
devtools::load_all(".")
normalize.minMax(dm9)
?apply
devtools::load_all(".")
normalize.minMax(dm9)
dm9
?apply
?"/"
devtools::load_all(".")
normalize.minMax(dm9)
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
weight.standard(myData, all.users, rounds="all", cost_ids=4)
weight.differenceToIdeal(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
devtools::load_all(".")
weight.differenceToIdeal(myData, all.users, rounds="all", cost_ids=4)
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
dm9
weight.entropy(myData, 9, rounds="all", cost_ids=4)
weight.differenceToIdeal(myData, 9, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, 9, rounds="all", cost_ids=4)
weight.standard(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
getAttrValues(myData)
dm9
normalize.altMethod(dm9)
normalize.altMethod(dm9,1:4, cost_ids=4)
devtools::load_all(".")
weight.differenceToIdeal(myData,9, rounds="all", cost_ids)
weight.differenceToIdeal(myData,9, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.differenceToIdeal(myData,9, rounds="all", cost_ids=4)
lapply(getAttrValues(myData, 1:4, max))
lapply(getAttrValues(myData, max,  1:4))
lapply(getAttrValues(myData), max,  1:4))
lapply(getAttrValues(myData), max,  1:4)
lapply(getAttrValues(myData), max)
lapply(getAttrValues(myData, 1:4), max)
lapply(getAttrValues(myData, 1:4), max)
lapply(getAttrValues(myData, 1:4), min)
get_attr_values(myData)
get_attr_values(myData, 1:4)
get_attr_values(myData, 1)
dm9
c(1,3)
rbind(c(1,3),2:3)
class(rbind(c(1,3),2:3))
testM <- rbind(c(1,3),2:3)
rbind(testM, testM, testM)
testM <- rbind(testM, testM, testM)
testM[-1,]
testM[-1:2,]
testM[-c(1,2),]
lapply(getAttrValues(myData, 1:4), max)
sapply(getAttrValues(myData, 1:4), max)
sapply(getAttrValues(myData, 4:1), max)
maxmax <- sapply(getAttrValues(myData, 4:1), max)
minmin <- sapply(getAttrValues(myData, 4:1), min)
maxmax
minmin
dm9
dm9binded <- rbind(maxmax, minmin, dm9)
dm9binded
?rbind
minmin <- sapply(getAttrValues(myData, 1:4), min)
minmin <- sapply(getAttrValues(myData, 1:4), min)
dm9binded <- rbind(maxmax, minmin, dm9)
dm9binded
maxmax <- sapply(getAttrValues(myData, 1:4), max)
dm9binded <- rbind(maxmax, minmin, dm9)
dm9binded
devtools::load_all(".")
weight.highestValue(myData, 9:10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 9:10, rounds="all")
?sapply
devtools::load_all(".")
weight.highestValue(myData, 9:10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 9:10, rounds="all")
sapply(getAttrValues(myData, 1:4), min, USE.NAMES = T)
weight.highestValue(myData, 9:12, rounds="all")
weight.highestValue(myData, 9:12, rounds="first")
matrix(1,3,3,)
matrix(1,3,3)
matrix(1,3,4)
weight.highestValue(myData, 9:10, rounds="all")
devtools::load_all(".")
dm9
normalize.highestValue(dm9)
devtools::load_all(".")
normalize.highestValue(dm9)
dm9nocost <- decision_matrix(myData,9,rounds="all")
dm9nocost
normalize.highestValue(dm9nocost)
normalize.highestValue(dm9nocost, cost_ids = 4)
normalize.highestValue(dm9nocost, 4)
devtools::load_all(".")
normalize.highestValue(dm9nocost, 4)
normalize.highestValue(dm9nocost)
devtools::load_all(".")
normalize.highestValue(dm9nocost)
dm9binded
maxmax
minmin
dm9binded <- rbind(maxmax, minmin, dm9nocost)
dm9binded
devtools::load_all(".")
normalize.highestValue(dm9nocost)
normalize.highestValue(dm9binded)
normalize.highestValue(dm9binded, 4)
normalize.highestValue(dm9binded)
normalize.highestValue(dm9binded, 1:4, 4)
devtools::load_all(".")
normalize.highestValue(dm9binded, 1:4, 4)
devtools::load_all(".")
normalize.highestValue(dm9binded, 1:4, 4)
devtools::load_all(".")
normalize.highestValue(dm9binded, 1:4, 4)
normalize.highestValue(dm9binded)
normalize.highestValue(dm9binded)
dm9binded
normalize.highestValue(dm9binded, 1:4, 4)
weight.highestValue(myData, 9, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.highestValue(myData, 9, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.highestValue(myData, 9, attr=1:4, rounds="all", cost_ids=4)
weight.highestValue(myData, 9:10, attr=1:4, rounds="all", cost_ids=4)
decisionMatrix(myData, 10)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=4)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=3)
devtools::load_all(".")
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=4)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=3)
weight.highestValue(myData, 9:10, attr=1:3, rounds="first", cost_ids=3)
devtools::load_all(".")
weight.highestValue(myData, 9:10, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 9:10, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=3)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
weight_higher_sum_value(myData, 9, rounds="all")
getAttrWeights(myData, 9, rounds="all")
devtools::load_all(".")
getAttrWeights(myData, 9, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, all.users, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.highestValue(myData, 9, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 10, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 10, attr=1:3, rounds="all", cost_ids=3)
dm10norm <- weight.highestValue(myData, 10, attr=1:3, rounds="all", cost_ids=4)[[1]]
dm10norm <- weight.highestValue(myData, 10, attr=1:4, rounds="all", cost_ids=4)[[1]]
dmnorm10
dm10norm
highestValue(dm10norm)
decisionMatrix(myData, 10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all")
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, attr=1:4,rounds="all", cost_ids = 4)
weight.highAndStandard(myData, 10, attr=1:4,rounds="all", cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
weight.highAndStandard(myData, 10, attr=1:4,rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, attr=1:4 rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, attr=1:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
get_attrs_ID(myData)
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all", cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all")
weight.highestValue(myData, all.users, rounds="all", gamma=0.8)
weight.highestValue(myData, all.users, rounds="all")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
decisionMatrix(myData, 58:63, rounds="all",cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all")
weight.highestValue(myData, all.users, rounds="all", cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
weight.highAndStandard(myData, 6, rounds="all", cost_ids = 4)
weight.highAndStandard(myData, all.users, rounds="all", cost_ids = 4)
weight.highAndStandard(myData, all.users, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:3, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:3, rounds="all")
weight.highestValue(myData, 61:62, attr=2:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:4, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, attr=1:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=2:4, rounds="all", cost_ids = 4)
devtools::load_all(".")
<<<<<<< HEAD
=======
decisionMatrix(myData, 10, rounds="all")
decision_matrix(myData, 9, rounds=list(a=1:3))
decisionMatrix(myData, 9, rounds=list(a=1:3))
decisionMatrix(myData, 9, rounds=list(a=1:8))
decisionMatrix(myData, 9, rounds=list(a=1:3))
decisionMatrix(myData, 9:10, rounds=list(a=1:3))
decisionMatrix(myData, 9:10, rounds=list(a=1:3, b=1:2))
is.char("all")
?is.vector
is.character("all")
is.character(1:3)
is.character(list(a = "a"))
is.character(list(a = 1:3))
!is.char("all")
!is.character("all")
!is.character(1:3)
is.vector("all")
devtools::load_all(".")
decisionMatrix(myData, 9:10, rounds=list(a=1:3, b=1:2))
devtools::load_all(".")
devtools::load_all(".")
is.character(NULL)
devtools::load_all(".")
devtools::load_all(".")
decisionMatrix(myData, 9:10, rounds=list(a=1:3, b=1:2))
decisionMatrix(myData, 9:10, rounds=list(a=1:3))
decisionMatrix(myData, 9:10, rounds=list(a=1:6))
decisionMatrix(myData, 9:10, rounds=list(a=1))
decisionMatrix(myData, 9:10, rounds=1:3
))
decisionMatrix(myData, 9:10, rounds=1:3)
devtools::load_all(".")
devtools::load_all(".")
decisionMatrix(myData, 9:10, rounds=1:8)
devtools::load_all(".")
decisionMatrix(myData, 9:10, rounds=1:8)
devtools::load_all(".")
decisionMatrix(myData, 9:10, rounds=1:8)
devtools::load_all(".")
decisionMatrix(myData, 9:10, rounds=1:8)
devtools::load_all(".")
decisionMatrix(myData, 9:10, rounds=1:8)
devtools::load_all(".")
?decision_matrix
devtools::load_all(".")
?decision_matrix
?gain_matrix()
library(productConfig)
?gain_matrix()
?gain_matrix
help(gain_matrix)
?gain_matrix
?as.list
?gain_matrix
?gain_matrix
library(roxygen2)
?gain_matrix
devtools::load_all(".")
?gain_matrix
gainMatrix
help("gain_matrix")
help("gain_matrix", package="productConfig")
?do.call
trpValueMatrix(myData, 9, mr = NULL, sq = NULL, g = NULL)
decisionMatrix(myData, 9, attr=3:1)
decisionMatrix(myData, 9, attr=4:1)
?trpValueMatrix
devtools::load_all(".")
devtools::check_doc()
devtools::check()
devtools::load_all(".")
trpValueFunction(aMatrix = matrix(1:6, 2, 3), triRefps = c(1,4,8))
trpValueFunction(aMatrix = matrix(1:6, 2, 3), triRefps = c(10,40,80))
trpValueFunction(aMatrix = matrix(1:6, 2, 3), triRefps = c(1,3,4.5))
trpValueFunction(aMatrix = matrix(1:6, 2, 3), triRefps = c(2,3,4.5))
trpValueFunction(matrix(1:16, 16, 1), triRefps = c(4, 8.9, 12.5))
trpValueFunction(matrix(1:16, 16, 1), triRefps = c(4, 8.9, 12.5), beta_f = 7)
trpValueFunction_extend(8:10)
trpValueFunction_extend(4, mr = 1, sq = 3, g = 8, beta_f = 7)
trpValueFunction_extend(0.18, mr = 0.15, sq = 0.55, g = 1.10)
devtools::load_all(".")
overallPV_interface(trp10.14, weight(1,2,3))
overallPV_interface(trp10.14, weight=c(1,2,3))
overallPV_interface(trp10.14, weight=c(1,2))
overallPV_interface(trp10.14, weight=c(1,2,3,4))
xx
trp10.full
overallPV_interface(trp10.14, weight=c(1,2,3,4))
overallPV_interface(trp10.full, weight=c(1,2,3,4))
warnings()
overallPV_interface
overallPV_interface(trp10.full, weight=c(1,2,3,4))
trp10.full
overallPV_interface(trp10.full, weight=list(ww = c(1,2,3,4)))
devtools::load_all(".")
devtools::load_all(".")
overallPV_interface(trp10.full, weight=c(1,2,3,4))
overallPV_interface(trp10.full, weight=list(ww = c(1,2,3,4), w2= c(1,2,4,5)))
overallPV_interface(trp10.full, weight=list(ww = c(1,2,3,4), w2= c(1,2,3,4)))
overallPV_interface(trp10.full, weight=list(ww = c(1,2)))
devtools::load_all(".")
overallPV_interface(trp10.full, weight=list(ww = c(1,2)))
overallPV_interface(trp10.full, weight=list(ww = c(1,2,3,4)))
overallPV_interface(trp10.full, weight=list(ww = c(1,2,3)))
overallPV_interface(trp10.13 , weight=list(ww = c(1,2,3,4)))
devtools::load_all(".")
overallPV_interface(trp10.13 , weight=list(ww = c(1,2,3,4)))
devtools::load_all(".")
overallPV_interface(trp10.13 , weight=list(ww = c(1,2,3,4)))
?ncol
devtools::load_all(".")
overallPV_interface(trp10.13 , weight=list(ww = c(1,2,3,4)))
overallPV_interface(trp10.13[[1]] , weight=list(ww = c(1,2,3,4)))
is.matrix(matrix(1:6,2,3))
is.list(matrix(1:6,2,3))
overallPV_interface(trpValueMatrix(myData, 9:11) , weight=list(ww = c(1,2,3,4)))
overallPV_interface(trpValueMatrix(myData, 9:11) , weight=list(ww = c(1,2,3,4)))
overallPV_interface(trpValueMatrix(myData, 9:11) , weight=list(ww = c(1,2,3,4), w2=c(1,3,4)))
devtools::load_all(".")
overallPV_interface(trpValueMatrix(myData, 9:11) , weight=list(ww = c(1,2,3,4), w2=c(1,3,4)))
as.list(matrix(1:6,2,3))
devtools::load_all(".")
overallPV_interface(trpValueMatrix(myData, 9:11) , weight=list(ww = c(1,2,3,4), w2=c(1,3,4)))
devtools::load_all(".")
overallPV_interface(trpValueMatrix(myData, 9:11) , weight=list(ww = c(1,2,3,4), w2=c(1,3,4)))
devtools::load_all(".")
overallPV_interface(trpValueMatrix(myData, 9) , weight=list(ww = c(1,2,3,4), w2=c(1,3,4)))
overallPV_interface(trpValueMatrix(myData, 9) , weight=list(ww = c(1,2,3,4)))
overallPV_interface(trpValueMatrix(myData, 9)[[1]] , weight=list(ww = c(1,2,3,4)))
overallPV_interface(matrix(1:8,2,4) , weight=list(ww = c(1,2,3,4)))
getAttrWeights(weight=c(1,2,3,4))
devtools::load_all(".")
overallPV_interface(trpValueMatrix(myData, 9) , weight=list(ww = c(1,2,3,4), w2=c(1,3,4)))
Show Traceback
Rerun with Debug
overallPV_interface(trpValueMatrix(myData, 9) , weight=list(ww = c(1,2,3,4), w2=c(1,3,4)))
devtools::load_all(".")
overallPV_interface(trpValueMatrix(myData, 9) , weight=list(ww = c(1,2,3,4), w2=c(1,3,4)))
devtools::load_all(".")
overallPV_interface(trpValueMatrix(myData, 9) , weight=list(ww = c(1,2,3,4), w2=c(1,3,4)))
devtools::load_all(".")
overallPV_interface(trpValueMatrix(myData, 9) , weight=list(ww = c(1,2,3,4), w2=c(1,3,4)))
overallPV_interface(trpValueMatrix(myData, 9) , weight=list(ww = c(1,2,3,4), w2=c(1,3,4,2))
)
devtools::load_all(".")
overallPV_interface(aMatrix = matrix(1:8, 2, 34, weight = c(0.25, 0.3, 0.15, 0.3))
)
devtools::load_all(".")
overallPV_interface(aMatrix = matrix(1:8, 2, 34, weight = c(0.25, 0.3, 0.15, 0.3))
)
devtools::load_all(".")
overallPV_interface(trp.ValueMatrix = matrix(1:8, 2, 34, weight = c(0.25, 0.3, 0.15, 0.3)))
devtools::load_all(".")
overallPV_interface(trp.ValueMatrix = matrix(1:8, 2, 4), weight = c(0.25, 0.3, 0.15, 0.3)))
devtools::load_all(".")
overallPV_interface(trp.ValueMatrix = matrix(1:8, 2, 4), weight = c(0.25, 0.3, 0.15, 0.3))
overallPV_interface(matrix(1:32, 16, 2), c(0.72, 0.25))
overallPV_interface(list(matrix1 = (1:32, 16, 2), matrix2 = (1:14, 7, 2)), weight = c(100, 200))
overallPV_interface(list(matrix1 = (1:32, 16, 2), matrix2 = (1:14, 7, 2)), weight = c(100, 200))
list(matrix1 = (1:32, 16, 2), matrix2 = (1:14, 7, 2))
?list
overallPV_interface(list(matrix1 = matrix(1:32, 16, 2), matrix2 = matrix(1:14, 7, 2)), weight = c(100, 200))
overallPV_interface(list(m1 = matrix(1:32, 16, 2), m2 = matrix(1:14, 7, 2)),list(weight1 = c(100, 200), weight2 = c(20, 50)))
devtools::load_all(".")
devtools::load_all(".")
gainMatrix(myData, 9:11)
gainMatrix(myData, 9:11, rounds="all")
gainMatrix2(myData, 9:11, rounds="all")
system.time(replicate(100, gainMatrix2(myData, 9:11, rounds="all")))
system.time(replicate(100, gainMatrix(myData, 9:11, rounds="all")))
system.time(replicate(100, gainMatrix2(myData, 9:11, rounds="all")))
system.time(replicate(100, gainMatrix2(myData, all.users, rounds="all")))
system.time(replicate(100, gainMatrix(myData, all.users, rounds="all")))
system.time(replicate(100, trpValueMatrix(myData, all.users, rounds="all")))
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
trpValueMatrix(myData, all.users, rounds="all")
trpValueMatrix(myData, 9, mr=5)
load("U:/Development/productConfig/new_BA.RData")
all.users
summary(weight.entropy(myData, all.users, rounds="all"))
library()
install.packages("devtools")
library("devtools")
library("devtools")
library(devtools)
load_all()
load_all(".")
devtools::load_all(".")
install.packages("roxygen2")
devtools::load_all(".")
summary(weight.entropy(myData, all.users, rounds="all"))
weight.entropy(myData, all.users, rounds="all")
weight.entropy(myData, all.users, rounds="all")
devtools::load_all(".")
weight.entropy(myData, all.users, rounds="all")
load("U:/Development/productConfig/new_BA.RData")
dm9
dm10
dm10 <- dm10[[1]]
normalize.altMethod(dm10)
entropy(normalize.altMethod(dm10))
entropy(normalize.minMax(dm10))
normalize.minMax(dm10)
devtools::load_all(".")
weight.entropy(myData, all.users, rounds="all")
devtools::load_all(".")
weight.entropy(myData, all.users, rounds="all")
devtools::load_all(".")
weight.entropy(myData, all.users, rounds="all")
devtools::load_all(".")
weight.entropy(myData, all.users, rounds="all")
dm9
entropy(decisonMatrix(myData, 9, rounds="all"=[[1]]))
entropy(decisonMatrix(myData, 9, rounds="all")[[1]])
entropy(decisionMatrix(myData, 9, rounds="all")[[1]])
decisionMatrix(myData, 9, rounds="all")[[1]]
normalize.minMax(decisionMatrix(myData, 9, rounds="all")[[1]])
dm9normMin <- normalize.minMax(decisionMatrix(myData, 9, rounds="all")[[1]])
entropy(dm9normMin)
dm9normMin <- normalize.altMethod(decisionMatrix(myData, 9, rounds="all")[[1]])
dm9normMin <- normalize.minMax(decisionMatrix(myData, 9, rounds="all")[[1]])
dm9normAlt <- normalize.altMethod(decisionMatrix(myData, 9, rounds="all")[[1]])
dm9normAlt
d9normMin
dm9normMin
entropy(dm9normMin)
differenceToIdeal(dm9normAlt)
differenceToIdeal(dm9normAlt, attr=1:4)
devtools::load_all(".")
devtools::load_all(".")
weight.entropy(myData, 9, rounds="all")
weight.entropy(myData, 9, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.entropy(myData, 9, rounds="all", cost_ids=4)
weight.entropy(myData, all.users, rounds="all", cost_ids=4)
weight.standard(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
devtools::load_all(".")
weight.standard(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, all.users, rounds="all", cost_ids=4)
decisionMatrix(myData, 9, rounds="all")
decisionMatrix(myData, 6, rounds="all")
devtools::load_all(".")
weight.standard(myData, all.users, rounds="all", cost_ids=4)
weight.standard(myData, 6, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, 6, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, 6, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, 6, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, 6, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, 6, rounds="all", cost_ids=4)
decisionMatrix(myData, 6, rounds="all")
weight.standard(myData, 6, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, 6, rounds="all", cost_ids=4)
weight.standard(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, all.users, rounds="all", cost_ids=4)
$`57`
attr1     attr2     attr3     attr4
0.3956439 0.3021780 0.0000000 0.3021780
$`58`
attr1     attr2     attr3     attr4
0.3169873 0.3169873 0.0000000 0.3660254
$`59`
attr1     attr2     attr3     attr4
0.1651209 0.2610791 0.2841586 0.2896413
$`60`
attr1     attr2     attr3     attr4
0.3333333 0.3333333 0.0000000 0.3333333
$`61`
attr1     attr2     attr3     attr4
0.3368993 0.1631007 0.1631007 0.3368993
$`62`
attr1 attr2 attr3 attr4
0.0   0.5   0.0   0.5
$`63`
[1] 0.25 0.25 0.25 0.25
weight.standard(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.standard(myData, all.users, rounds="all", cost_ids=4)
devtools::load_all(".")
devtools::load_all(".")
>>>>>>> 2f712c7547595327b8680eba7969ab4c913cab30
