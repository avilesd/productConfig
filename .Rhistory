system.time(replicate(100, get_attr_values(cam4, 4)))
system.time(replicate(1, powerful_function(cam4, allUsers, FUN = get_table_by_ID)))
system.time(replicate(1, getTableById(cam4, allUsers)))
allUsers <- getAllUserIds(cam4)
system.time(replicate(1, powerful_function(cam4, allUsers, FUN = get_table_by_ID)))
system.time(replicate(1, getTableById(cam4, allUsers)))
system.time(replicate(30, powerful_function(cam4, allUsers, FUN = get_rounds_by_ID)))
system.time(replicate(, powerful_function(cam4, allUsers, FUN = get_rounds_by_ID)))
system.time(replicate(1, getRoundsById(cam4, allUsers))),
system.time(replicate(, powerful_function(cam4, allUsers, FUN = get_rounds_by_ID)))
system.time(replicate(1, getRoundsById(cam4, allUsers)))
system.time(replicate(, powerful_function(cam4, allUsers, FUN = get_rounds_by_ID)))
system.time(replicate(1, getRoundsById(cam4, allUsers)))
system.time(replicate(1, powerful_function(cam4, allUsers, FUN = get_rounds_by_ID)))
system.time(replicate(1, getRoundsById(cam4, allUsers))),
system.time(replicate(1, powerful_function(cam4, allUsers, FUN = get_all_default_rps)))
system.time(replicate(1, powerful_function(cam4, allUsers, FUN = get_all_default_rps)))
system.time(replicate(1, getDefaultRefps(cam4, allUsers)))
system.time(replicate(10, powerful_function(cam4, allUsers, FUN = get_table_by_ID)))
system.time(replicate(10, getTableById(cam4, allUsers)))
system.time(replicate(30, getAttrValues(cam4, 1:4)))
system.time(replicate(50, getAttrValues(cam4, 1:4)))
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = decision_matrix(), rounds="all", cost_ids=4)))
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = decision_matrix, rounds="all", cost_ids=4)))
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = decision_matrix, rounds="all", cost_ids=4)))
devtools::load_all(".")
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = decision_matrix, rounds="all", cost_ids=4)))
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = decision_matrix, rounds="all", cost_ids=4)))
system.time(replicate(10, decisionMatrix(cam4, allUsers,
rounds="all", cost_ids=4))) cost_ids=4)))
system.time(replicate(10, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)))
system.time(replicate(5, powerful_function(cam4, allUsers,
FUN = ref_points, rounds="all", cost_ids=4)))
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = gain_matrix, cost_ids=4)))
system.time(replicate(10, gainMatrix(cam4, allUsers,
cost_ids=4)))
system.time(replicate(1, powerful_function(cam4, allUsers,
FUN = loss_matrix, rounds="all", cost_ids=4)))
system.time(replicate(1, lossMatrix(cam4, allUsers,
rounds="all",cost_ids=4)))
system.time(replicate(1, powerful_function(cam4, allUsers,
FUN = norm_g_l_matrices, rounds="all", cost_ids=4)))
system.time(replicate(1, norm.gainLoss(cam4, allUsers,
rounds="all",cost_ids=4)))
system.time(replicate(2, powerful_function(cam4, allUsers,
FUN = pvalue_matrix, cost_ids=4)))
system.time(replicate(2, pvMatrix(cam4, allUsers,
cost_ids=4)))
system.time(replicate(1, powerful_function(cam4, allUsers,
FUN = overall_pv, cost_ids=4)))
system.time(replicate(1, overallPV(cam4, allUsers, cost_ids=4)))
system.time(replicate(2, powerful_function(cam4, allUsers,
FUN = get_attr_weight, rounds="all", cost_ids=4)))
system.time(replicate(2, getAttrWeights(cam4, allUsers, rounds="all",
cost_ids=4)))
row(cam4)
length(row(cam4))
dim(cam4)
summary(cam4)
tail(cam4)
library(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(
"[32, 11]"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"$carb[32]"     = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[c(11, 32)]]" = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[11]][32]"    = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
".subset2"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)
)
?microbenchmark
system.time(replicate(100, decisionMatrix(cam4, allUsers, rounds="all", cost_ids = 4)))
system.time(replicate(1, decisionMatrix(cam4, allUsers, rounds="all", cost_ids = 4)))
microbenchmark(
"[32, 11]"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"$carb[32]"     = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[c(11, 32)]]" = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[11]][32]"    = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
".subset2"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)
, times=10)
microbenchmark(
"[32, 11]"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"$carb[32]"     = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[c(11, 32)]]" = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[11]][32]"    = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
".subset2"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)
, times=1)
microbenchmark(
"[32, 11]"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"$carb[32]"     = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[c(11, 32)]]" = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[11]][32]"    = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
".subset2"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)
, times=10)
microbenchmark(
"decisionMatrix"= replicate(1, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(1, referencePoints(cam4, allUsers, rounds="all", cost_ids=4)),
"w.diffToIdeal"	= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(1, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(1, overallTRP(cam4, allUsers, rounds="all", cost_ids=4)),
"overallPV"    	= replicate(1, overallTRP(cam4, allUsers, rounds="all", cost_ids=4)),
times=1)
microbenchmark(
"decisionMatrix"= replicate(1, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(1, referencePoints(cam4, allUsers, cost_ids=4)),
"w.diffToIdeal"	= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(1, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(1, overallTRP(cam4, allUsers, rounds="all", cost_ids=4)),
"overallPV"    	= replicate(1, overallTRP(cam4, allUsers, rounds="all", cost_ids=4)),
times=1)
full.tri.refps
triRefPs <- full.tri.refps
dualRefPs <- full.dual.refps
full.dual.refps
microbenchmark(
"decisionMatrix"= replicate(10, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(10, referencePoints(cam4, allUsers, cost_ids=4)),
"w.diffToIdeal"	= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(10, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps=triRefPs)),
"overallPV"    	= replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, dual.refps=dualRefPs)),
times=1)
microbenchmark(
"decisionMatrix"= replicate(10, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(10, referencePoints(cam4, allUsers, cost_ids=4)),
"w.diffToIdeal"	= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(10, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(10, overallDRP(cam4, allUsers, rounds="all", cost_ids=4, dual.refps=dualRefPs)),
"overallTRP"    = replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps=triRefPs)),
times=10)
microbenchmark(
"decisionMatrix"= replicate(10, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(10, referencePoints(cam4, allUsers, cost_ids=4)),
"w.diffToIdeal"	= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(10, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(10, overallDRP(cam4, allUsers, rounds="all", cost_ids=4, dual.refps=dualRefPs)),
"overallTRP"    = replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps=triRefPs)),
times=1)
microbenchmark(
"decisionMatrix"= replicate(10, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(10, referencePoints(cam4, allUsers, cost_ids=4)),
"w.diffToIdeal"	= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(10, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(10, overallDRP(cam4, allUsers, rounds="all", cost_ids=4, dual.refps=dualRefPs)),
"overallTRP"    = replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps=triRefPs)),
times=5)
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/oldVariablesDelete.RData")
dim(myData)
system.time(replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps=triRefPs)))
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/oldVariablesDelete.RData")
allUsers
savehistory("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/PerfAnalysisData.Rhistory")
cam8000 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle8968.csv")
View(cam8000)
getAllUserIds(cam8000)
head(decisionMatrix(cam8000, getAllUserIds(cam8000)))
tail(decisionMatrix(cam8000, getAllUserIds(cam8000)))
cam13500 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle13464.csv")
View(cam13500)
getAllUserIds(cam13500)
tail(decisionMatrix(cam8000, getAllUserIds(cam135000)))
tail(decisionMatrix(cam8000, getAllUserIds(cam13500)))
tail(decisionMatrix(cam13500, getAllUserIds(cam13500)))
tail(decisionMatrix(cam13500, getAllUserIds(cam13500), rounds="all"))
length(decisionMatrix(cam13500, getAllUserIds(cam13500), rounds="all"))
length(decisionMatrix(cam4, getAllUserIds(cam4), rounds="all"))
Tabelle29000 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle29000.csv")
View(Tabelle29000)
cam58 <- Tabelle29000
rm(Tabelle29000)
Tabelle57 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle57000.csv")
View(Tabelle57)
cam112 <- Tabelle57
rm(Tabelle57)
Tabelle8968 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle8968.csv")
View(Tabelle8968)
rm(Tabelle8968)
Tabelle31000 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle31000.csv")
View(Tabelle31000)
cam31 <- Tabelle31000
cam8 <- cam8000
cam13 <- cam8000
rm(cam8, cam8000)
rm(Tabelle31000)
cam17 <- cam13500
rm(cam13500)
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/cam-PerformanceAnalysis.RData")
devtools::load_all(".")
overallTRP(cam4, getAllUserIds(cam4), rounds="all", cost_ids=4)
overallTRP(cam4, getAllUserIds(cam4), rounds="all", cost_ids=4, tri.refps = triRefPs)
system.time(overallTRP(cam4, getAllUserIds(cam4), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam4, getAllUserIds(cam4), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam13, getAllUserIds(cam13), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam17, getAllUserIds(cam17), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam31, getAllUserIds(cam31), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam58, getAllUserIds(cam58), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam112, getAllUserIds(cam112), rounds="all", cost_ids=4, tri.refps = triRefPs))
library(microbenchmark)
?microbenchmark
Tabelle215000 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle215000.csv")
View(Tabelle215000)
cam215 <- Tabelle215000
system.time(overallTRP(cam215, getAllUserIds(cam215), rounds="all", cost_ids=4, tri.refps = triRefPs))
tail(overallTRP(cam215, getAllUserIds(cam215), rounds="all", cost_ids=4, tri.refps = triRefPs))
cam430 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle413000.csv")
View(cam430)
cam430 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle413000.csv")
View(cam430)
system.time(overallTRP(cam430, getAllUserIds(cam430), rounds="all", cost_ids=4, tri.refps = triRefPs))
cam215 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle215000.csv")
View(cam215)
system.time(overallTRP(cam4, getAllUserIds(cam4), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam13, getAllUserIds(cam13), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam17, getAllUserIds(cam17), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam31, getAllUserIds(cam31), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam58, getAllUserIds(cam58), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam112, getAllUserIds(cam112), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam215, getAllUserIds(cam215), rounds="all", cost_ids=4, tri.refps = triRefPs))
system.time(overallTRP(cam430, getAllUserIds(cam430), rounds="all", cost_ids=4, tri.refps = triRefPs))
cam860 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle860000.csv")
View(cam860)
system.time(overallTRP(cam860, getAllUserIds(cam860), rounds="all", cost_ids=4, tri.refps = triRefPs))
cam1000 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle1000000.csv")
View(cam1000)
system.time(overallTRP(cam1000, getAllUserIds(cam1000), rounds="all", cost_ids=4, tri.refps = triRefPs))
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/cam-PerformanceAnalysis.RData")
cam2000 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle2000000.csv")
View(cam2000)
dim(cam2000)
getAllUserIds(cam2000)
system.time(overallTRP(cam2000, getAllUserIds(cam2000), rounds="all", cost_ids=4, tri.refps = triRefPs))
devtools::load_all(".")
system.time(overallTRP(cam2000, getAllUserIds(cam2000), rounds="all", cost_ids=4, tri.refps = triRefPs))
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/cam-PerformanceAnalysis.RData")
system.time(overallTRP(cam2000, getAllUserIds(cam2000), rounds="all", cost_ids=4, tri.refps = triRefPs))
cam4000 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle4000000.csv")
View(cam4000)
cam8000 <- read.csv("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/Daten4/Tabelle8000000.csv")
head(cam8000)
getAllUserIds(cam8000)
dim(cam2000)
dim(cam4000)
dim(cam8000)
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/cam-PerformanceAnalysis.RData")
system.time(overallTRP(cam430, getAllUserIds(cam430), rounds="all", cost_ids=4, tri.refps = triRefPs))
Delete <- overallTRP(cam430, getAllUserIds(cam430), rounds="all", cost_ids=4, tri.refps = triRefPs)
head(Delete)
Delete <- overallTRP(cam430, getAllUserIds(cam430), rounds="all", cost_ids=4, tri.refps = triRefPs)
head(Delete)
rm(Delete)
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/cam-PerformanceAnalysis.RData")
R.version$year
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/oldVariablesDelete.RData")
devtools::load_all(".")
decisionMatrix(cam4, allUsers)
decisionMatrix(cam4, 6)
devtools::load_all(".")
decisionMatrix(cam4, 6)
decisionMatrix
source("R/DecisionMatrix.R")
decisionMatrix(cam4, 6)
overallDRP(cam4, 10, rounds="all")
overallDRP(cam4, 10, rounds="all", dual.refps=dualRefPs)
overallTRP(cam4, 10, rounds="all", tri.refps=triRefPs)
overallTRP(cam4, 10, rounds="all", tri.refps=triRefPs, cost_ids=4)
Delete <- overallTRP(cam4, 10, rounds="all", tri.refps=triRefPs, cost_ids=4)
names(Delete[[1]])
c(names(Delete[[1]]))
?names
class(names(Delete[[1]]))
as.numeric(names(Delete[[1]]))
overallPV(cam4, 10)
pathnames <- list.files(pattern="[.]R$", path="R/", full.names=TRUE);
sapply(pathnames, FUN=source);
overallPV(cam4, 10)
overallTRP(cam4, 10, rounds="all", tri.refps=triRefPs, cost_ids=4)
overallDRP(cam4, 10, rounds="all", dual.refps=dualRefPs)
devtools::load_all(".")
refPs
refPs <- c(1.5,1.5,1.5,0.17)
triRefPs
source("R/TestFunctions.R")
overallPV(cam4, allUsers, rounds="all", cost_ids=4)
getNamesAsNums(overallPV(cam4, allUsers, rounds="all", cost_ids=4))
getNamesAsNums(sort(decreasing, overallPV(cam4, allUsers, rounds="all", cost_ids=4)))
getNamesAsNums(sort(decreasing = T, overallPV(cam4, allUsers, rounds="all", cost_ids=4)))
getNamesAsNums(overallPV(cam4, allUsers, rounds="all", cost_ids=4))
source("R/TestFunctions.R")
getNamesAsNums(overallPV(cam4, allUsers, rounds="all", cost_ids=4))
source("R/TestFunctions.R")
getNamesAsNums(overallPV(cam4, allUsers, rounds="all", cost_ids=4))
source("R/TestFunctions.R")
getNamesAsNums(overallPV(cam4, allUsers, rounds="all", cost_ids=4))
getNamesAsNums(overallPV(cam4, allUsers, rounds="all", cost_ids=4))
resPV.diff <- getNamesAsNums(overallPV(cam4, allUsers, rounds="all", cost_ids=4))
resDRP.diff <- getNamesAsNums(overallDRP(cam4, allUsers, rounds="all", cost_ids=4, dual.refps = dualRefPs))
heaD(resDRP)
head(resDRP)
head(resDRP.diff)
resPV.diff <- getNamesAsNums(overallPV(cam4, allUsers, rounds="all", cost_ids=4, refps = refPs))
head(resPV.diff)
resTRP.diff <- getNamesAsNums(overallDRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps = triRefPs))
resTRP.diff <- getNamesAsNums(overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps = triRefPs))
head(resTRP.diff)
x <- 1:10
y <- c(5:1, 6, 10:7)
x
y
spearman.test(x, y)
install.packages("pspearman")
spearman.test(x, y)
library(pspearman)
spearman.test(x, y)
spearman.test(x, x)
spearman.test(x, x)$p.value
spearman.test(x, x)$rho.value
spearman.test(x, x)$rho
class(spearman.test(x, x))
spearman.test(x, x)$estimate
source("R/TestFunctions.R")
resTRP.diff <- getNamesAsNums(overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps = triRefPs))
correlationS(resPT.diff, resDRP.diff)
correlationS(resPV.diff, resDRP.diff)
?mapply
mapply(function(x, y) spearman.test(x,y)$estimate, c(1,3), c(1,2))
resPV
spearman.test(1:2,2:3)
resPV.diff
users2correlate <- allUsers
users2correlate
users2correlate[-c(51,52)]
users2correlate <- users2correlate[-c(51,52)]
resPV.diff <- getNamesAsNums(overallPV(users2correlate, allUsers, rounds="all", cost_ids=4, refps = refPs))
resDRP.diff <- getNamesAsNums(overallDRP(users2correlate, allUsers, rounds="all", cost_ids=4, dual.refps = dualRefPs))
resTRP.diff <- getNamesAsNums(overallTRP(users2correlate, allUsers, rounds="all", cost_ids=4, tri.refps = triRefPs))
resPV.diff <- getNamesAsNums(overallPV(cam4, users2correlate, rounds="all", cost_ids=4, refps = refPs))
resDRP.diff <- getNamesAsNums(overallDRP(cam4, users2correlate, rounds="all", cost_ids=4, dual.refps = dualRefPs))
resTRP.diff <- getNamesAsNums(overallTRP(cam4, users2correlate, rounds="all", cost_ids=4, tri.refps = triRefPs))
correlationS(resPV.diff, resDRP.diff)
class(correlationS(resPV.diff, resDRP.diff))
mean(correlationS(resPV.diff, resDRP.diff))
mean(correlationS(resPV.diff, resTRP.diff))
mean(correlationS(resDRP.diff, resTRP.diff))
resPV.entro <- getNamesAsNums(overallPV(cam4, users2correlate, rounds="all", cost_ids=4, refps = refPs, weightFUN="entropy"))
resDRP.entro <- getNamesAsNums(overallDRP(cam4, users2correlate, rounds="all", cost_ids=4, dual.refps = dualRefPs, weightFUN="entropy"))
resTRP.entro <- getNamesAsNums(overallTRP(cam4, users2correlate, rounds="all", cost_ids=4, tri.refps = triRefPs, weightFUN="entropy"))
users2correlate
users2correlate[-1]
users2correlate <- users2correlate[-1]
resPV.entro <- getNamesAsNums(overallPV(cam4, users2correlate, rounds="all", cost_ids=4, refps = refPs, weightFUN="entropy"))
resDRP.entro <- getNamesAsNums(overallDRP(cam4, users2correlate, rounds="all", cost_ids=4, dual.refps = dualRefPs, weightFUN="entropy"))
resTRP.entro <- getNamesAsNums(overallTRP(cam4, users2correlate, rounds="all", cost_ids=4, tri.refps = triRefPs, weightFUN="entropy"))
resPV.diff <- getNamesAsNums(overallPV(cam4, users2correlate, rounds="all", cost_ids=4, refps = refPs))
resDRP.diff <- getNamesAsNums(overallDRP(cam4, users2correlate, rounds="all", cost_ids=4, dual.refps = dualRefPs))
resTRP.diff <- getNamesAsNums(overallTRP(cam4, users2correlate, rounds="all", cost_ids=4, tri.refps = triRefPs))
mean(correlationS(resPV.diff, resDRP.diff))
mean(correlationS(resPV.diff, resTRP.diff))
mean(correlationS(resDRP.diff, resTRP.diff))
mean(correlationS(resPV.entro, resDRP.entro))
mean(correlationS(resPV.entro, resTRP.entro))
mean(correlationS(resDRP.entro, resTRP.entro))
resPV.high <- getNamesAsNums(overallPV(cam4, users2correlate, rounds="all", cost_ids=4, refps = refPs, weightFUN="highAndStandard"))
resDRP.high <- getNamesAsNums(overallDRP(cam4, users2correlate, rounds="all", cost_ids=4, dual.refps = dualRefPs, weightFUN="highAndStandard"))
resTRP.high <- getNamesAsNums(overallTRP(cam4, users2correlate, rounds="all", cost_ids=4, tri.refps = triRefPs, weightFUN="highAndStandard"))
resPV.high <- getNamesAsNums(overallPV(cam4, users2correlate, rounds="all", cost_ids=4, refps = refPs, weightFUN="highAndStandard", gamma=0.5))
resDRP.high <- getNamesAsNums(overallDRP(cam4, users2correlate, rounds="all", cost_ids=4, dual.refps = dualRefPs, weightFUN="highAndStandard", gamma=0.5))
resTRP.high <- getNamesAsNums(overallTRP(cam4, users2correlate, rounds="all", cost_ids=4, tri.refps = triRefPs, weightFUN="highAndStandard", gamma=0.5))
mean(correlationS(resPV.high, resDRP.high))
mean(correlationS(resPV.high, resTRP.high))
mean(correlationS(resDRP.high, resTRP.high))
citation("pspearman")
pvMatrix(myData)
pvMatrix(myData, 33)
devtools::load_all(".")
overallPC(myData, 33)
overallPV(myData, 33)
devtools::load_all(".")
overallPV(myData, 33, rounds="all", cost_ids = 4, weightFUN = "entropy")
trp.valueMatrix(myData, 10, rounds="all", cost_ids=4, tri.refps=triRefPs)
pvMatrix(myData, 10, rounds="all", cost_ids=4, refps=refPs)
namesPRID
rankedRatings
length(rankedRatings)
oPT.diff
ranked.oDRP.diff
new.vPT
refPs
dualRefPs
triRefPS
triRefPs
new.vTRP
length(ppastedNamesPRID)
length(pastedNamesPRID)
pastedNamesPRID
new.vPT
new.vDRP
new.vTRP
oPT.entropy
oDRP.entropy
oTRP.entropy
oPT.diff
oPT.entropy 	<- mapply(overall_pv_extend, new.vPT, getAttrWeights(weightFUN="entropy"))
oPT.entropy 	<- mapply(overall_pv_extend, new.vPT, getAttrWeights(cam4, pastedNamesPRID, weightFUN="entropy"))
oPT.entropy
length(oPT.entropy)
length(new.vPT)
length(getAllUserIds(cam4)
)
oPT.entropy[pastedNamesPRID]
length(oPT.entropy[pastedNamesPRID])
pasted.vPT <- new.vPT[pastedNamesPRID]
length(pasted.vPT)
pasted.vPT  <- new.vPT[pastedNamesPRID]
pasted.vDRP <- new.vDRP[pastedNamesPRID]
pasted.vTRP <- new.vTRP[pastedNamesPRID]
identical(pasted.vPT, pasted.DRP)
identical(pasted.vPT, pasted.vDRP)
all.equal(pasted.vPT, pasted.vDRP)
pasted.vDRP
pasted.vTRP
pasted.vPT
oPT.entropy 	<- mapply(overall_pv_extend, pasted.vPT, getAttrWeights(cam4, pastedNamesPRID, weightFUN="entropy"))
oPT.entropy
oDRP.entropy  <- mapply(overall_pv_extend, pasted.vDRP, getAttrWeights(cam4, pastedNamesPRID, weightFUN="entropy"))
oTRP.entropy  <- mapply(overall_pv_extend, pasted.vTRP, getAttrWeights(cam4, pastedNamesPRID, weightFUN="entropy"))
oDRP.entropy
oTRP.entropy
oTRP.entropy[[1]]
ranked.oPT.entropy 	<- sapply(oPT.entropy, sort, decreasing=T)
ranked.oDRP.entropy  <- sapply(oDRP.entropy, sort, decreasing=T)
ranked.oTRP.entropy  <- sapply(oTRP.entropy, sort, decreasing=T)
ranked.oTRP.entropy[[1]]
rankedRatings
ranked.oPT.entropy
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/cam-PerformanceAnalysis.RData")
getAttrWeights(cam4, pastedNamesPRID, weightFUN = "entropy")
getAttrWeights(cam4, pastedNamesPRID, weightFUN = "entropy", cost_ids=4)
getAttrWeights(cam4, pastedNamesPRID, weightFUN = "entropy", cost_ids=4, rounds="all")
oPT.entropy 	<- mapply(overall_pv_extend, pasted.vPT, getAttrWeights(cam4, pastedNamesPRID, weightFUN="entropy", rounds="all"))
oDRP.entropy  <- mapply(overall_pv_extend, pasted.vDRP, getAttrWeights(cam4, pastedNamesPRID, weightFUN="entropy", rounds="all"))
oTRP.entropy  <- mapply(overall_pv_extend, pasted.vTRP, getAttrWeights(cam4, pastedNamesPRID, weightFUN="entropy", rounds="all"))
ranked.oPT.entropy 	<- sapply(oPT.entropy, sort, decreasing=T)
ranked.oDRP.entropy  <- sapply(oDRP.entropy, sort, decreasing=T)
ranked.oTRP.entropy  <- sapply(oTRP.entropy, sort, decreasing=T)
ranked.oPT.entropy
ranked.oDRP.entropy
ranked.oTRP.entropy
ranked.oDRP.entropy
ranked.oPT.entropy
ranked.oTRP.entropy
ranked.oTRP.entropy
oPT.hs 	<- mapply(overall_pv_extend, pasted.vPT, getAttrWeights(cam4, pastedNamesPRID, weightFUN="highAndStandard", rounds="all", gamma=0.6))
oDRP.hs  <- mapply(overall_pv_extend, pasted.vDRP, getAttrWeights(cam4, pastedNamesPRID, weightFUN="highAndStandard", rounds="all", gamma=0.6))
oTRP.hs  <- mapply(overall_pv_extend, highAndStandardvTRP, getAttrWeights(cam4, pastedNamesPRID, weightFUN="highAndStandard", rounds="all", gamma=0.6))
oPT.hs 	<- mapply(overall_pv_extend, pasted.vPT, getAttrWeights(cam4, pastedNamesPRID, weightFUN="highAndStandard", rounds="all", gamma=0.6))
oDRP.hs <- mapply(overall_pv_extend, pasted.vDRP, getAttrWeights(cam4, pastedNamesPRID, weightFUN="highAndStandard", rounds="all", gamma=0.6))
oTRP.hs <- mapply(overall_pv_extend, pasted.vTRP, getAttrWeights(cam4, pastedNamesPRID, weightFUN="highAndStandard", rounds="all", gamma=0.6))
oPT.hs
oDRP.hs
o-tRP.hs
oTRP.hs
ranked.oPT.hs 	<- sapply(oPT.hs, sort, decreasing=T)
ranked.oDRP.hs  <- sapply(oDRP.hs, sort, decreasing=T)
ranked.oTRP.hs  <- sapply(oTRP.hs, sort, decreasing=T)
ranked.oPT.hs
ranked.oPT.hs
ranked.oPT.hs
ranked.oTRP.hs
ranked.oPT.hs
ranked.oPT.hs
ranked.oDRP.hs
ranked.oDRP.hs
ranked.oDRP.hs
ranked.oTRP.hs
ranked.oTRP.hs
ranked.oTRP.hs
devtools::load_all(".")
cam4
dim(cam4)
dim(cam2000)
overallTRP(cam4, 10, rounds="all")
overallTRP(cam4, 10, rounds="all", tri.refps=triRefPs)
overallTRP(cam4, 10, rounds="all", tri.refps=triRefPs, cost_ids=4)
devtools::load_all(".")
matrix(c(9,12,12,12,350,350,350,350,12,12,15,15,125,150,175,125), 4, 4, byrow = T)
matrix(c(9,12,12,12,350,350,350,350,12,12,15,15,125,150,175,125), 4, 4)
aMatrix <- matrix(c(9,12,12,12,350,350,350,350,12,12,15,15,125,150,175,125), 4, 4)
aMatrix
?apply
apply(aMatrix, 2, gain_fun_a)
gain_fun_a
devtools::load_all(".")
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/oldVariablesDelete.RData")
dim(cam8000)
