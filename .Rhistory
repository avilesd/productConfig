weight.highestValue(myData, 61:62, attr=1:4, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, attr=1:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=2:4, rounds="all", cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
trp10.13
trpValueMatrix(myData, 9:10, rounds="all")
decisionMatrix(myData, 9:10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 9:10, rounds="all")
trpValueMatrix(myData, 9:10, rounds="all")
decisionMatrix(myData, 9:10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 9:10, rounds="all")
trpValueMatrix(myData, 10, rounds="all")
decisionMatrix(myData, 10, rounds="all")
decisionMatrix.oneAttr(myData, 10, rounds="all", attr=1)
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
devtools::load_all(".")
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
devtools::load_all(".")
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
decisionMatrix(myData, 10, rounds="all", attr=1)
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
devtools::load_all(".")
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
trpValueMatrix(myData, 10, rounds="all", attr=1, cost_ids=4)
trpValueMatrix(myData, 10, rounds="all", attr=1)
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
library(productConfig)
?trp
?trpValueMatrix
devtools::load_all(".")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
source('C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/R/GainsAndLosses.R')
?apply
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
View(aa)
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
aa
aaa
dm10
camera_data <- myData
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(norm.gainLoss)
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
round(1.111111, 2)
lapply(getAttrValues(dataset = camera_data), round, 8)
lapply(getAttrValues(dataset = camera_data), round, 7)
lapply(getAttrValues(dataset = camera_data), round, 8)
sample(all.users, 1)
decisionMatrix(camera_data,52)
decisionMatrix(camera_data,sample(all.users, 1))
decisionMatrix(camera_data,sample(all.users, 1))
decisionMatrix(camera_data,sample(all.users, 1))
decisionMatrix(camera_data,sample(all.users, 1))
devtools::load_all(".")
overallPV(camera_data, 33, attr=1:4, rounds="all", cost_ids = 4, weightFUN="entropy",
alpha = 0.88, beta=0.88, lambda=2.25)
overallPV(camera_data, 33, rounds="all", cost_ids=4, weightFUN ="entropy")
load("U:/Development/productConfig/new_BA.RData")
overallP(myData, 33, rounds="all", cost_ids=4, weightFUN ="entropy")
devtools::load_all(".")
overallPV(myData, 33, rounds="all", cost_ids=4, weightFUN ="entropy")
3 != 3
3 != 4
length(attr) > 1
2 > 1
someMatrix
dim(someMatrix)
2:4 == c(2,3,4)
?anxy
?any
any(2:4 == c(2,3,4))
any(!dim(someMatrix) != c(2,4))
any(!dim(someMatrix) != c(2,5))
any(!(dim(someMatrix) != c(2,4)))
any(!(dim(someMatrix) != c(2,5)))
any(!(dim(someMatrix) != c(4,5)))
?all
all(!(dim(someMatrix) != c(4,5)))
all(!(dim(someMatrix) != c(2,5)))
all(!(dim(someMatrix) != c(2,6)))
all(!(dim(someMatrix) != c(2,4)))
all(!(dim(someMatrix) != c(4,2)))
devtools::load_all(".")
devtools::load_all(".")
trpValueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4)
trp.ValueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4. tri.refps=matrix(2.5,3,3))
trp.ValueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4, tri.refps=matrix(2.5,3,3))
trp.valueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4, tri.refps=matrix(2.5,3,3))
matrix(1:9,3,3)
trp.valueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4, tri.refps=matrix(1:9,3,3))
devtools::load_all(".")
trp.valueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4, tri.refps=matrix(1:9,3,3))
devtools::load_all(".")
devtools::load_all(".")
trp.valueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4, tri.refps=matrix(1:9,3,3))
devtools::load_all(".")
trp.valueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4, tri.refps=matrix(1:9,3,3))
trpValueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4, mr=1, sq=4, g=7)
trpValueMatrix(myData, 9, attr=1:4, rounds="all", cost_ids=4, mr=1, sq=4, g=7)
devtools::load_all(".")
trp.valueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4, tri.refps=matrix(1:9,3,3))
trpValueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4)
trp.valueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4, tri.refps=matrix(c(0.5,1.5,2.5, 1,4,7),3,3))
?matrix
trp.valueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4, tri.refps=matrix(c(0.5,1.5,2.5, 1,4,7),3,3, byrow = T))
matrix(c(0.5,1.5,2.5, 1,4,7),3,3, byrow = T)
matrix(c(0.5,1.5,2.5),3,3, byrow = T)
triRefps13 <- matrix(c(0.5,1.5,2.5),3,3, byrow = T)
trp.valueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4, tri.refps=triRefps13)
trpValueMatrix(myData, 9, attr=1:3, rounds="all", cost_ids=4)
trpValueMatrix(myData, 9, attr=1:3, rounds="all")
trpValueMatrix(myData, 9, attr=4, rounds="all", cost_ids=4)
trpValueMatrix(myData, 9, attr=4, rounds="all", cost_ids=4, mr=0.40, sq=0.17, g=-0.10)
trp10.full
trpValueMatrix(myData, 10, attr=4, rounds="all", cost_ids=4, mr=0.40, sq=0.17, g=-0.10)
trpValueMatrix(myData, 10, attr=4, rounds="all", cost_ids=4)
trpValueMatrix(myData, 10, attr=1:3, rounds="all", cost_ids=4)
trpValueMatrix(myData, 10, attr=4, rounds="all")
trpValueMatrix(myData, 10, attr=1:3, rounds="all", cost_ids=4)
trpValueMatrix(myData, 10, attr=4, rounds="all", cost_ids=4, mr=0.40, sq=0.17, g=-0.10)
trp10.full
triRefps14 <- rbind(triRefps13, c(0.40,0.17,-0.10)
)
triRefps14
trp.valueMatrix(myData, 9, attr=1:4, rounds="all", cost_ids=4, tri.refps=triRefps14)
trp.valueMatrix(myData, 9, attr=1:4, rounds="all", tri.refps=triRefps14)
trp.valueMatrix(myData, 10, attr=1:4, rounds="all", tri.refps=triRefps14)
trp.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, tri.refps=triRefps14)
devtools::load_all(".")
trp.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, tri.refps=triRefps14)
devtools::load_all(".")
trp.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, tri.refps=triRefps14)
devtools::load_all(".")
trp.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, tri.refps=triRefps14)
trp.valueMatrix(myData, 10, attr=1:4, rounds="all", tri.refps=triRefps14)
devtools::load_all(".")
trp.valueMatrix(myData, 10, attr=1:4, rounds="all", tri.refps=triRefps14)
trp.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, tri.refps=triRefps14)
trp10.full
devtools::load_all(".")
trp.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, tri.refps=triRefps14)
dual10.full
devtools::load_all(".")
dual.valueMatrix(myData, 10, attr=1:3, rounds="all", dual.refps = c(1.5,2.5))
devtools::load_all(".")
dual.valueMatrix(myData, 10, attr=1:3, rounds="all", dual.refps = c(1.5,2.5))
dual.valueMatrix(myData, 10, attr=1:3, rounds="all", dual.refps = matrix(c(1.5,2.5),3,2,byrow=F)
)
dual.valueMatrix(myData, 10, attr=1:3, rounds="all", dual.refps = matrix(c(1.5,2.5),3,2, byrow=T)
)
devtools::load_all(".")
dual.valueMatrix(myData, 10, attr=1:3, rounds="all", dual.refps = matrix(c(1.5,2.5),3,2, byrow=T)
)
dual10.13
dualValueMatrix(myData, 10, attr=1:3, rounds="all", dual.refps =c(1.5,2.5))
dualValueMatrix(myData, 10, attr=1:3, rounds="all", cost_ids=4, dual.refps =c(1.5,2.5))
dualValueMatrix(myData, 10, attr=4, rounds="all", cost_ids=4, dual.refps =c(1.5,2.5))
dualValueMatrix(myData, 10, attr=4, rounds="all", cost_ids=4, dual.refps =c(2.5,2.5))
dualValueMatrix(myData, 10, attr=4, rounds="all", cost_ids=4, dual.refps =c(2.5,1.5))
dualValueMatrix(myData, 10, attr=4, rounds="all", cost_ids=4, dual.refps =c(2.5,1.5))
dualValueMatrix(myData, 10, attr=4, rounds="all", cost_ids=3, dual.refps =c(2.5,1.5))
dualValueMatrix(myData, 10, attr=4, rounds="all", cost_ids=2, dual.refps =c(2.5,1.5))
dualValueMatrix(myData, 10, attr=1:3, rounds="all", cost_ids=4, dual.refps =c(2.5,1.5))
dualValueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps =c(2.5,1.5))
dualValueMatrix(myData, 10, attr=1:4, rounds="all",  dual.refps =c(2.5,1.5))
devtools::load_all(".")
dualValueMatrix(myData, 10, attr=1:4, rounds="all",  dual.refps =c(2.5,1.5))
dual.valueMatrix(myData, 10, attr=1:3, rounds="all", dual.refps = matrix(c(1.5,2.5),3,2, byrow=T)
)
dualValueMatrix(myData, 10, attr=1:4, rounds="all",  dual.refps =c(1.5,2.5))
dual.valueMatrix(myData, 10, attr=1:3, rounds="all", dual.refps = matrix(c(1.5,2.5),3,2, byrow=T))
devtools::load_all(".")
dual.valueMatrix(myData, 10, attr=1:3, rounds="all", dual.refps = matrix(c(1.5,2.5),3,2, byrow=T))
pvMatrix(myData, 10, attr=1:3, refps = c(1.5,1.5,1.5))
pvMatrix(myData, 10, attr=1:3, refps = c(1.5,1.5,1.5,NA))
pvMatrix(myData, 10, attr=1:3, rounds="all", refps = c(1.5,1.5,1.5,NA))
dual.valueMatrix(myData, 10, attr=1:3, rounds="all", dual.refps = matrix(c(1.5,2.5),3,2, byrow=T))
dualRefps13 <- matrix(c(1.5,2.5),3,2, byrow=T)
save.image("U:/Development/productConfig/testDataNewDRPandTRP.RData")
install.packages("devtools")
library(devtools)
devtools::load_all(".")
install.packages("roxygen2")
devtools::load_all(".")
install.packages("testthat")
devtools::load_all(".")
getAttrValues(myData)
c(0.16805556, -0.27777778, -0.12916667, 0.01944444, 0.46527778, 0.31666667, 0.61388889)
sort(c(0.16805556, -0.27777778, -0.12916667, 0.01944444, 0.46527778, 0.31666667, 0.61388889))
paste(sort(c(0.16805556, -0.27777778, -0.12916667, 0.01944444, 0.46527778, 0.31666667, 0.61388889)), sep=",")
sort(c(0.16805556, -0.27777778, -0.12916667, 0.01944444, 0.46527778, 0.31666667, 0.61388889))
pvMatrix(myData, 10, attr=1:4, rounds="all", refps = c(1.5,1.5,1.5,0.17))
load("U:/Development/productConfig/new_BA.RData")
matrix(c(1.5,2.5),3,2, byrow=T)
dual.refps <- matrix(c(1.5,2.5),3,2, byrow=T)
cbind(dual.refps, c(0.17,-0.10))
rbind(dual.refps, c(0.17,-0.10))
full.dual.refps <- rbind(dual.refps, c(0.17,-0.10))
equal.dual.refps <- rbind(dual.refps, c(0.17,0.17))
dual.refps
equal.dual.refps[,2] <- c(1.5,1.5,1.5)
equal.dual.refps[,2] <- c(1.5, 1.5, 1.5, 0.17)
equal.dual.refps
decisionMatrix(myData, 10, attr=1:4, rounds="all", refps = c(1.5,1.5,1.5,0.17))
decisionMatrix(myData, 10, attr=1:4, rounds="all", cost_ids=4)
pvMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17))
dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)
tri.refps
dual.refps
full.tri.refps <- cbind(c(0.5, 0.5, 0.5), dual.refps)
full.tri.refps
full.tri.refps <- rbind(full.tri.refps, c(0.40, 0.17, -0.10))
full.dual.refps
full.tri
full.tri.refps
pt.refps <- c(1.5,1.5,1.5,0.17)
decisionMatrix(myData, 10, attr=1:4, rounds="all", cost_ids=4)
dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)
decisionMatrix(myData, 10, attr=1:4, rounds="all", cost_ids=4)
pvMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17))
dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)
trp.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, tri.refps = full.tri.refps)
dm10final <- decisionMatrix(myData, 10, attr=1:4, rounds="all", cost_ids=4)
round?
?round
round(dmfinal, digits=3)
round(dm10final, digits=3)
round(dm10final[[1]], digits=3)
round(dm10final[[1]], digits=2)
dm10rounded <- round(dm10final[[1]], digits=2)
dual10final <- dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)
dual10rounded <- round(dual10final[[1]], digits=2)
dual10rounded
trp10final <- trp.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, tri.refps=full.tri.refps)
trp10final <- round(trp10final[[1]], digits=2)
trp10rounded <- round(trp10final[[1]], digits=2)
trp10rounded
trp10final
trp10rounded <- round(trp10final, digits=2)
trp10rounded
save.image("U:/Development/productConfig/new_BA.RData")
pvMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17))
pt10final <- pvMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17))[[1]]
pt10rounded <- round(pt10final, 2)
pt10rounded
colnames(t10rounded) <- c("attr1", "attr2", "attr3", "attr4")
colnames(pt10rounded) <- c("attr1", "attr2", "attr3", "attr4")
pt10rounded
rownames(pt10rounded) <- c("round0", "round1", "round2", "round3", "round4")
pt10rounded
pvMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17))
dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=equal.dual.refps)
dual10rounded
dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)
equal.dual.refps
trp.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, tri.refps=full.tri.refps)
t(full.tri.refps)
test.tri.refps <- full.tri.refps
test.tri.refps
devtools::load_all(".")
dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)
dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=equal.dual.refps)
dual10rounded <-dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=equal.dual.refps)[[1]]
dual10rounded <- round(dual10rounded, 2)
dual10rounded
dual10rounded <-dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=final.dual.refps)[[1]]
dual10rounded <-dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)[[1]]
dual10rounded <- round(dual10rounded, 2)
dual10rounded
reverse.dual.refps <- equal.dual.refps
reverse.dual.refps
reverse.dual.refps[,2] <- c(0.5, 0.5, 0.5, 0.40)
dual.valueMatrix(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=reverse.dual.refps)
dual10rounded
reverse.dual.refps
overallTRP(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=reverse.dual.refps)
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=reverse.dual.refps)
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)
overallPV(myData, 10, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17))
overallPV(myData, 11, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17))
overallDRP(myData, 11, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)
overallDRP(myData, 11, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)[[1]]
max(overallDRP(myData, 11, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)[[1]])
names(max(overallDRP(myData, 11, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)[[1]]))
vectovector <- overallDRP(myData, 11, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)[[1]]
vectorve
vectorvector <- overallDRP(myData, 11, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)[[1]]
vectorvector
which.is.max(vectorvector)
install.packages("nnet")
library(nnet)
which.is.max(vectorvector)
devtools::load_all(".")
smallList<- overallDRP(myData, 11, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps)
devtools::load_all(".")
getHighestRound(smallList)
devtools::load_all(".")
getHighestRound(smallList)
devtools::load_all(".")
getHighestRound(smallList)
getHighestRound(overallPV(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17)))
getHighestRound(overallDRP(myData, 11, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps))
getHighestRound(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps))
highestDRP <- getHighestRound(overallDRP(myData, 11, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps))
highestPV <- getHighestRound(overallPV(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17)))
?compare
compare(highestDRP, highestPV)
full.dual.refps
c(1.50,  2.5,
,1.50,  2.5,
,1.50,  2.5,
,0.17, -0.1)
c(1.50,  2.5,
,1.50,  2.5
,1.50,  2.5
,0.17, -0.1)
c(1.50,  2.5
,1.50,  2.5
,1.50,  2.5
,0.17, -0.1)
devtools::load_all(".")
?comparelists
install.packageS(made4)
install.packages(made4)
install.packages("made4")
comparelists(highestDRP, highestPV)
library(made4)
highestDRP == highestPV
mapply("==", highestDRP, highestPV)
?mapply
mapply("+", highestDRP, highestPV)
mapply("c", highestDRP, highestPV)
devtools::load_all(".")
highDRP <- getHighestRound(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps))
highDRP
highPV <- getHighestRound(overallPV(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17)))
highPV
highPV == highDRP
resultEquality <- highPV == highDRP
length(resultEquality)
full.dual.refps
highDRP <- getHighestRound(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=equal.dual.refps))
highDRP
highPV <- getHighestRound(overallPV(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17)))
resultEquality <- highPV == highDRP
resultEquality
highPV
length(highPV)
43/51
full.tri.refps
equal.tri.refps[,1] <- c(1.5,1.5,1.5,0.17)
equal.tri.refps <- full.tri.refps
equal.tri.refps[,1] <- c(1.5,1.5,1.5,0.17)
equal.tri.refps[,3] <- c(1.5,1.5,1.5,0.17)
equal.tri.refps
highTRP <- getHighestRound(overallTRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, tri.refps=equal.tri.refps))
equal.tri.refps[,3] <- c(1.51,1.51,1.51,0.18)
equal.tri.refps[,1] <- c(1.49,1.49,1.49,0.18)
equal.tri.refps[,3] <- c(1.51,1.51,1.51,0.16)
highTRP <- getHighestRound(overallTRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, tri.refps=equal.tri.refps))
highPV == highTRP
30/51
camera_data <- myData
save.image("U:/Development/productConfig/new_BA.RData")
library(devtools)
install_github("avilesd/productConfig")
?round
sapply(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps), which.is.max)
?which.is.max
sapply(overallPV(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, refps = c(1.5,1.5,1.5,0.17)), which.is.max)
abcc <- sapply(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=full.dual.refps), which.is.max)
rep(1.5, 6)
dd <- rbind(matrix(rep(1.5, 6), 3, 2), c(0.17,0.17))
dd
abcc <- sapply(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=equal.dual.refps), which.is.max)
abcc
sapply(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=dd), which.is.max)
?sapply
devtools::load_all(".")
dd
equal.dual.refps
sapply(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=dd), which.is.max)
sapply(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=equal.dual.refps), which.is.max)
equal(dd, equal.dual.refps)
identical(dd, equal.dual.refps)
sapply(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=equal.dual.refps), which.is.max)
sapply(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=equal.dual.refps), which.is.max)
sapply(overallPV(myData, all.users, attr=1:4, rounds="all", cost_ids=4,
refps = c(1.5,1.5,1.5,0.17)), which.is.max)
38/51
40/51
?which is max
?which.is.max
sapply(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids = 4, dual.refps=equal.dual.refps), which.max)
drpresult2 <- sapply(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4,
dual.refps=myDual.refps), which.max, USE.NAMES = F)
myDual.refps <- rbind(matrix(rep(1.5, 6), 3, 2), c(0.17,0.17))
drpresult2 <- sapply(overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4,
dual.refps=myDual.refps), which.max, USE.NAMES = F)
ptresult <- sapply(overallPV(myData, all.users, attr=1:4, rounds="all", cost_ids=4,
refps = c(1.5,1.5,1.5,0.17)), which.max, USE.NAMES = F)
drpresult == ptresult
drpresult2 == ptresult
46/51
full.dual.refps
full.dual.refps[,2] <- c(2,2,2, 0.1)
full.dual.refps
full.dual.refps[,2] <- c(1.8,1.8,1.8, 0.11)
full.dual.refps
devtools::load_all(".")
overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4,
dual.refps=myDual.refps)
devtools::load_all(".")
overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4,
dual.refps=myDual.refps)
overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4,
dual.refps=full.dual.refps)
equal.tri.refps
51-14
36/51
overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)
devtools::load_all(".")
devtools::load_all(".")
overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)
full.dual.refps
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps, delta=0.5)
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=equal.dual.refps, delta=0.5)
equal.dual.refps
full.dual.refps[,2] <- c(2.5,2.5,2.5,-0.10)
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps, delta=0.5)
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=equal.dual.refps, delta=0.5)
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=equal.dual.refps, delta=0.95)
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps, delta=0.95)
full.dual.refps
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)
full.tri.refps
overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)
sort(overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)[[1]])
sort(overallTRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, tri.refps=full.tri.refps)[[1]])
pt.refps <- c(1.5,1.5,1.5,0.17)
sort(overallPV(myData, 10, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps)[[1]])
overallPV(myData, 10, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps)[[1]]
overallPV(myData, 10, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps)
decisionMatrix(myData, 9, attr=1:4, rounds="all", cost_ids=4)
decisionMatrix(myData, 10, attr=1:4, rounds="all", cost_ids=4)
overallDRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)
decisionMatrix(myData, all.users, attr=1:4, rounds="all", cost_ids=4)
overallPV(myData, 10, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps)
sort(overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)[[1]])
sort(overallTRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, tri.refps=full.tri.refps)[[1]])
overallPV(myData, 10, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps, weightFUN = entropy)
overallPV(myData, 10, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps, weightFUN = "entropy")
sort(overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps, weightFUN = "entropy")[[1]])
sort(overallTRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, tri.refps=full.tri.refps, weightFUN = "entropy")[[1]])
overallPV(myData, 10, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps, weightFUN = "highAndStandard")
overallPV(myData, 10, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps, weightFUN = "highAndStandard", gamma=0.5)
sort(overallDRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps, weightFUN = "highAndStandard", gamma=0.5)[[1]])
sort(overallTRP(myData, 10, attr=1:4, rounds="all", cost_ids=4, tri.refps=full.tri.refps, weightFUN = "highAndStandard", gamma=0.5)[[1]])
overallPV(myData, 17, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps, weightFUN = "highAndStandard")
overallPV(myData, 17, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps, weightFUN = "highAndStandard", gamma=0.5)
overallPV(myData, 17, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps, weightFUN="differenceToIdeal")
sort(overallDRP(myData, 17, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)[[1]])
sort(overallTRP(myData, 17, attr=1:4, rounds="all", cost_ids=4, tri.refps=full.tri.refps)[[1]])
devtools::load_all(".")
overallPV(myData, 17, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps, weightFUN="differenceToIdeal")
sort(overallDRP(myData, 17, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)[[1]])
sort(overallTRP(myData, 17, attr=1:4, rounds="all", cost_ids=4, tri.refps=full.tri.refps)[[1]])
devtools::load_all(".")
devtools::load_all(".")
overallPV(myData, 17, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps, weightFUN="differenceToIdeal")
sort(overallDRP(myData, 17, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)[[1]])
sort(overallTRP(myData, 17, attr=1:4, rounds="all", cost_ids=4, tri.refps=full.tri.refps)[[1]])
remove.packages("productConfig")
devtools::load_all(".")
overallPV(myData, 17, attr=1:4, rounds="all", cost_ids=4, refps=pt.refps, weightFUN="differenceToIdeal")
sort(overallDRP(myData, 17, attr=1:4, rounds="all", cost_ids=4, dual.refps=full.dual.refps)[[1]])
sort(overallTRP(myData, 17, attr=1:4, rounds="all", cost_ids=4, tri.refps=full.tri.refps)[[1]])
library()
