weight.highestValue(myData, 9, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.highestValue(myData, 9, attr=1:4, rounds="all", cost_ids=4)
weight.highestValue(myData, 9:10, attr=1:4, rounds="all", cost_ids=4)
decisionMatrix(myData, 10)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=4)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=3)
devtools::load_all(".")
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=4)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=3)
weight.highestValue(myData, 9:10, attr=1:3, rounds="first", cost_ids=3)
devtools::load_all(".")
weight.highestValue(myData, 9:10, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 9:10, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 9:10, attr=1:3, rounds="all", cost_ids=3)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
weight_higher_sum_value(myData, 9, rounds="all")
getAttrWeights(myData, 9, rounds="all")
devtools::load_all(".")
getAttrWeights(myData, 9, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, all.users, attr=1:4, rounds="all", cost_ids=4)
devtools::load_all(".")
weight.highestValue(myData, 9, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 10, attr=1:3, rounds="first", cost_ids=3)
weight.highestValue(myData, 10, attr=1:3, rounds="all", cost_ids=3)
dm10norm <- weight.highestValue(myData, 10, attr=1:3, rounds="all", cost_ids=4)[[1]]
dm10norm <- weight.highestValue(myData, 10, attr=1:4, rounds="all", cost_ids=4)[[1]]
dmnorm10
dm10norm
highestValue(dm10norm)
decisionMatrix(myData, 10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all")
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, attr=1:4,rounds="all", cost_ids = 4)
weight.highAndStandard(myData, 10, attr=1:4,rounds="all", cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
weight.highAndStandard(myData, 10, attr=1:4,rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, attr=1:4 rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, attr=1:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
get_attrs_ID(myData)
devtools::load_all(".")
weight.highestValue(myData, 10, rounds="all", cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all", cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all")
weight.highestValue(myData, all.users, rounds="all", gamma=0.8)
weight.highestValue(myData, all.users, rounds="all")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
decisionMatrix(myData, 58:63, rounds="all",cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all",cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, all.users, rounds="all")
weight.highestValue(myData, all.users, rounds="all", cost_ids = 4)
weight.highestValue(myData, all.users, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highAndStandard(myData, 61:62, rounds="all", cost_ids = 4)
weight.highAndStandard(myData, 6, rounds="all", cost_ids = 4)
weight.highAndStandard(myData, all.users, rounds="all", cost_ids = 4)
weight.highAndStandard(myData, all.users, rounds="all")
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:3, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:3, rounds="all")
weight.highestValue(myData, 61:62, attr=2:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=1:4, rounds="all", cost_ids = 4)
devtools::load_all(".")
weight.highestValue(myData, 61:62, attr=1:4, rounds="all", cost_ids = 4)
weight.highestValue(myData, 61:62, attr=2:4, rounds="all", cost_ids = 4)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
trp10.13
trpValueMatrix(myData, 9:10, rounds="all")
decisionMatrix(myData, 9:10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 9:10, rounds="all")
trpValueMatrix(myData, 9:10, rounds="all")
decisionMatrix(myData, 9:10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 9:10, rounds="all")
trpValueMatrix(myData, 10, rounds="all")
decisionMatrix(myData, 10, rounds="all")
decisionMatrix.oneAttr(myData, 10, rounds="all", attr=1)
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
devtools::load_all(".")
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
devtools::load_all(".")
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
decisionMatrix(myData, 10, rounds="all", attr=1)
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
devtools::load_all(".")
trpValueMatrix.oneAttr(myData, 10, rounds="all", attr=1)
trpValueMatrix(myData, 10, rounds="all", attr=1, cost_ids=4)
trpValueMatrix(myData, 10, rounds="all", attr=1)
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
library(productConfig)
?trp
?trpValueMatrix
devtools::load_all(".")
devtools::load_all(".")
trpValueMatrix(myData, 10, rounds="all")
source('C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/R/GainsAndLosses.R')
?apply
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
View(aa)
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
aa
aaa
dm10
camera_data <- myData
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(norm.gainLoss)
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/BAFiles/knit_data.RData")
round(1.111111, 2)
lapply(getAttrValues(dataset = camera_data), round, 8)
lapply(getAttrValues(dataset = camera_data), round, 7)
lapply(getAttrValues(dataset = camera_data), round, 8)
sample(all.users, 1)
decisionMatrix(camera_data,52)
decisionMatrix(camera_data,sample(all.users, 1))
decisionMatrix(camera_data,sample(all.users, 1))
decisionMatrix(camera_data,sample(all.users, 1))
decisionMatrix(camera_data,sample(all.users, 1))
devtools::load_all(".")
weight.highAndStandard(myData, 33, rounds="all", cost_ids=4)
weight.entropy(myData, 33, rounds="all", cost_ids=4)
weight.differenceToIdeal(myData, 33, rounds="all", cost_ids=4)
?entropy
entropy
devtools::load_all(".")
differenceToIdeal(decisionMatrix(camera_data, 33, attr=1:4, rounds="all",                                         cost_ids = 4), 1:4)
differenceToIdeal(decisionMatrix(camera_data, 33, attr=1:4, rounds="all",                                         cost_ids = 4)[[1]], 1:4)
decisionMatrix(camera_data, 33, attr=1:4, rounds="all",                                         cost_ids = 4)[[1]]
weight.differenceToIdeal(camera_data, 33, attr=1:4, rounds="all",                                         cost_ids = 4)
devtools::load_all(".")
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/testDataNewDRPandTRP.RData")
overallTRP(myData, 10, rounds="all", cost_ids=4, tri.refps=triRefps14 )
trp.valueMatrix(myData, 10, rounds="all", cost_ids=4, tri.refps=triRefps14 )
trp10.full
weight.differenceToIdeal(myData, 10, rounds="all", cost_ids=4)
weiwei <-weight.differenceToIdeal(myData, 10, rounds="all", cost_ids=4)
overall_pv_extend(trp10full, weiwei)
overall_pv_extend(trp10.full, weiwei)
overall_pv_extend(trp10.full, weiwei[[1]])
weiwei
weiwei[[1]]
weiwei <- weiwei[[1]]
lapply(trp10.full, overall_pv_extend, weiwei[[1]])
lapply(trp10.full, overall_pv_extend, weiwei[[1]])
overall_pv_extend(trp10.full[[1]], weiwei[[1]])
length(weiwei[[1]])
weiwei
overall_pv_extend(trp10.full[[1]], weiwei)
trp.valueMatrix(myData, 10, rounds="all", cost_ids=4, tri.refps=triRefps14 )
overallTRP(myData, 10, rounds="all", cost_ids=4, tri.refps=triRefps14 )
overallDRP(myData, 10, rounds="all", cost_ids=4, tri.refps=dualRefps13)
overallDRP(myData, 10, rounds="all", cost_ids=4, dual.refps=dualRefps13)
dual.valueMatrix(myData, 10, rounds="all", cost_ids=4, dual.refps=dualRefps13)
devtools::load_all(".")
dual.valueMatrix(myData, 10, rounds="all", cost_ids=4, dual.refps=dualRefps13)
dual.valueMatrix(myData, 10, rounds="all", attr=1:3, cost_ids=4, dual.refps=dualRefps13)
dual.valueMatrix(myData, 10, rounds="all", attr=1:4, cost_ids=4, dual.refps=dualRefps13)
devtools::load_all(".")
dual.valueMatrix(myData, 10, rounds="all", attr=1:4, cost_ids=4, dual.refps=dualRefps13)
devtools::load_all(".")
devtools::load_all(".")
dual.valueMatrix(myData, 10, rounds="all", attr=1:4, cost_ids=4, dual.refps=dualRefps13)
devtools::load_all(".")
repeat(1:2,3)
repeat(3,1:3)
repeat(3)
?repeat
?rep
rep(c(1.5, 2.5), 3)
dualPoints <- matrix(c(sq=1.5,g=2.5,  1.5,2.5,  1.5,2.5,  0.17,-0.10),
nrow=4, ncol=2, byrow=TRUE)
dualPoints
triPoints <-  matrix(c(mr=0.5,sq=1.5,g=2.5,  0.5,1.5,2.5,  0.5,1.5,2.5,  0.40,0.17,-0.10),
nrow=4, ncol=3, byrow=TRUE)
triPoints
names(dualPoints) <- c(c("sq, g"), c("attr1", "attr2", "attr3", "attr4"))
dualPoints
dualPoints
dualPoints <- matrix(c(sq=1.5,g=2.5,  1.5,2.5,  1.5,2.5,  0.17,-0.10),
nrow=4, ncol=2, byrow=TRUE)
colnames(dualPoints) <- c("sq, g")
colnames(dualPoints) <- c("sq", "g")
dualPoints
devtools::load_all(".")
?cat
cat(dualPoints, triPoints)
cat(dualPoints, triPoints, fill=T)
cat(dualPoints, triPoints, fill=F)
devtools::load_all(".")
devtools::load_all(".")
overallDRP(camera_data, 33, attr=1:4, rounds="all", cost_ids = 4, weightFUN="entropy",
dual.refps = dualPoints, lambda = 2.25, delta = 0.8)
decisionMatrix(myData, 33, rounds="all", cost_ids=4)
overallTRP(camera_data, 33, rounds="all", cost_ids = 4, weightFUN="entropy",
tri.refps = triPoints, beta_f = 5,beta_l = 1,beta_g = 1,beta_s = 3)
overallTRP(camera_data, all.users, rounds="all", cost_ids = 4, weightFUN="entropy",
tri.refps = triPoints, beta_f = 5,beta_l = 1,beta_g = 1,beta_s = 3)
devtools::load_all(".")
weight.differenceToIdeal(camera_data, 33, attr=1:4, rounds="all", cost_ids = 4)
weight.highAndStandard(camera_data, 33, attr=1:4, rounds="all", cost_ids = 4)
weight.differenceToIdeal(camera_data, 33, attr=1:4, rounds="all", cost_ids = 4)
weight.entropy(camera_data, 33, attr=1:4, rounds="all", cost_ids = 4)
devtools::load_all(".")
overallDRP(full_data, 6:7 ,attr = c(1,2,3), rounds="all", dual.refps=matrix(1:4, 2, 2, byrow=T))
overallDRP(myData, 6:7 ,attr = c(1,2,3), rounds="all", dual.refps=matrix(1:4, 2, 2, byrow=T))
overallDRP(myData, 9:10 ,attr = c(1,2,3), rounds="all", dual.refps=matrix(1:4, 2, 2, byrow=T))
overallDRP(myData, 9:10 ,attr = c(1,2,3), rounds="all", dual.refps=matrix(1:6, 3, 2, byrow=T))
devtools::load_all(".")
overallTRP(full_data, 6:7 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
overallTRP(myData, 6:7 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
overallTRP(full_data, 9:10 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
overallTRP(myData, 9:10 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
getAllUserIds(myData)
overallTRP(full_data, 30:35 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
overallTRP(myData, 30:35 ,attr = c(1,2,3), rounds="all", tri.refps=matrix(1:9, 3, 3, byrow=T))
overallTRP(myData, userid = 100, rounds = "all", attr=3:4, tri.refps=matrix(1:9, 2, 3, byrow=T))
overallTRP(myData, userid = 58, rounds = "all", attr=3:4, tri.refps=matrix(1:9, 2, 3, byrow=T))
overallTRP(myData, userid = 58, rounds = "all", attr=3:4, tri.refps=matrix(1:6, 2, 3, byrow=T))
devtools::load_all(".")
sapply(overallTRP(camera4, users4, attr=1:4, rounds="all", cost_ids=4, tri.refps = full.tri.refps, weightFUN = "highAndStandard", gamma=0.7), function(xyz) max.col(matrix(xyz,nrow=1),"last"))
sapply(overallTRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4, tri.refps = full.tri.refps, weightFUN = "highAndStandard", gamma=0.7), function(xyz) max.col(matrix(xyz,nrow=1),"last"))
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/new_BA.RData")
sapply(overallTRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4, tri.refps = full.tri.refps, weightFUN = "highAndStandard", gamma=0.7), function(xyz) max.col(matrix(xyz,nrow=1),"last"))
sampleHighTRP <- sapply(overallTRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4, tri.refps = full.tri.refps, weightFUN = "highAndStandard", gamma=0.7), function(xyz) max.col(matrix(xyz,nrow=1),"last"))
full.tri.refps
lastR <- <- sapply(getRoundsById(myData, all.users), length)
lastR  <- sapply(getRoundsById(myData, all.users), length)
length(which(lastR == sampleHighTRP))
29/51
devtools::load_all(".")
devtools::load_all(".")
trpValueFunction_extend
source("R/TRPFunctions.R")
trpValueFunction_extend
sampleHighTRP <- sapply(overallTRP(myData, all.users, attr=1:4, rounds="all", cost_ids=4, tri.refps = full.tri.refps, weightFUN = "highAndStandard", gamma=0.7), function(xyz) max.col(matrix(xyz,nrow=1),"last"))
length(which(lastR == sampleHighTRP))
devtools::load_all(".")
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/oldVariablesDelete.RData")
get_rounds_by_ID(cam4)
get_rounds_by_ID(cam4, 6)
powerful_function(ggetTableById(cam4, getAllUserIds(cam4)))
powerful_function(ggetTableById(cam4, userid=getAllUserIds(cam4)))
dim(cam4)
dim(myData)
powerful_function(cam4, getAllUserIds(cam4), FUN = get_table_by_ID)
system.time(replicate(10, 10powerful_function(cam4, getAllUserIds(cam4), FUN = get_table_by_ID)))
system.time(replicate(10, powerful_function(cam4, getAllUserIds(cam4), FUN = get_table_by_ID)))
system.time(replicate(50, powerful_function(cam4, getAllUserIds(cam4), FUN = get_table_by_ID)))
load("C:/Users\diego\Google Drive\KIT\Seminar_eC_HCI\R\productConfig\oldVariablesDelete.RData")
system.time(replicate(10, powerful_function(cam4, getAllUserIds(cam4), FUN = get_table_by_ID)))
system.time(replicate(1, powerful_function(cam4, getAllUserIds(cam4), FUN = get_rounds_by_ID)))
system.time(replicate(1, powerful_function(cam4, getAllUserIds(cam4), FUN = get_all_default_rps)))
system.time(replicate(10, powerful_function(cam4, 1:4, FUN = get_attr_values)))
get_attr_values(cam4, 1:4)
get_attr_values(cam4, 1)
get_attr_values(cam4, 1:2)
system.time(replicate(10, get_attr_values(cam4, 1))))
system.time(replicate(10, get_attr_values(cam4, 1)))
system.time(replicate(getTableById(cam4, getAllUserIds(cam4))))
system.time(replicate(10, getTableById(cam4, getAllUserIds(cam4))))
system.time(replicate(30, getRoundsById(cam4, getAllUserIds(cam4))))
system.time(replicate(10, getDefaultRefps(cam4, allUsers)))
system.time(replicate(10, getDefaultRefps(cam4, all.users)))
system.time(replicate(30, getAttrValues(cam4, 1:4)))
system.time(replicate(100, get_attr_values(cam4, 1)))
system.time(replicate(100, get_attr_values(cam4, 2)))
system.time(replicate(100, get_attr_values(cam4, 3)))
system.time(replicate(100, get_attr_values(cam4, 4)))
system.time(replicate(1, powerful_function(cam4, allUsers, FUN = get_table_by_ID)))
system.time(replicate(1, getTableById(cam4, allUsers)))
allUsers <- getAllUserIds(cam4)
system.time(replicate(1, powerful_function(cam4, allUsers, FUN = get_table_by_ID)))
system.time(replicate(1, getTableById(cam4, allUsers)))
system.time(replicate(30, powerful_function(cam4, allUsers, FUN = get_rounds_by_ID)))
system.time(replicate(, powerful_function(cam4, allUsers, FUN = get_rounds_by_ID)))
system.time(replicate(1, getRoundsById(cam4, allUsers))),
system.time(replicate(, powerful_function(cam4, allUsers, FUN = get_rounds_by_ID)))
system.time(replicate(1, getRoundsById(cam4, allUsers)))
system.time(replicate(, powerful_function(cam4, allUsers, FUN = get_rounds_by_ID)))
system.time(replicate(1, getRoundsById(cam4, allUsers)))
system.time(replicate(1, powerful_function(cam4, allUsers, FUN = get_rounds_by_ID)))
system.time(replicate(1, getRoundsById(cam4, allUsers))),
system.time(replicate(1, powerful_function(cam4, allUsers, FUN = get_all_default_rps)))
system.time(replicate(1, powerful_function(cam4, allUsers, FUN = get_all_default_rps)))
system.time(replicate(1, getDefaultRefps(cam4, allUsers)))
system.time(replicate(10, powerful_function(cam4, allUsers, FUN = get_table_by_ID)))
system.time(replicate(10, getTableById(cam4, allUsers)))
system.time(replicate(30, getAttrValues(cam4, 1:4)))
system.time(replicate(50, getAttrValues(cam4, 1:4)))
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = decision_matrix(), rounds="all", cost_ids=4)))
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = decision_matrix, rounds="all", cost_ids=4)))
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = decision_matrix, rounds="all", cost_ids=4)))
devtools::load_all(".")
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = decision_matrix, rounds="all", cost_ids=4)))
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = decision_matrix, rounds="all", cost_ids=4)))
system.time(replicate(10, decisionMatrix(cam4, allUsers,
rounds="all", cost_ids=4))) cost_ids=4)))
system.time(replicate(10, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)))
system.time(replicate(5, powerful_function(cam4, allUsers,
FUN = ref_points, rounds="all", cost_ids=4)))
system.time(replicate(10, powerful_function(cam4, allUsers,
FUN = gain_matrix, cost_ids=4)))
system.time(replicate(10, gainMatrix(cam4, allUsers,
cost_ids=4)))
system.time(replicate(1, powerful_function(cam4, allUsers,
FUN = loss_matrix, rounds="all", cost_ids=4)))
system.time(replicate(1, lossMatrix(cam4, allUsers,
rounds="all",cost_ids=4)))
system.time(replicate(1, powerful_function(cam4, allUsers,
FUN = norm_g_l_matrices, rounds="all", cost_ids=4)))
system.time(replicate(1, norm.gainLoss(cam4, allUsers,
rounds="all",cost_ids=4)))
system.time(replicate(2, powerful_function(cam4, allUsers,
FUN = pvalue_matrix, cost_ids=4)))
system.time(replicate(2, pvMatrix(cam4, allUsers,
cost_ids=4)))
system.time(replicate(1, powerful_function(cam4, allUsers,
FUN = overall_pv, cost_ids=4)))
system.time(replicate(1, overallPV(cam4, allUsers, cost_ids=4)))
system.time(replicate(2, powerful_function(cam4, allUsers,
FUN = get_attr_weight, rounds="all", cost_ids=4)))
system.time(replicate(2, getAttrWeights(cam4, allUsers, rounds="all",
cost_ids=4)))
row(cam4)
length(row(cam4))
dim(cam4)
summary(cam4)
tail(cam4)
library(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(
"[32, 11]"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"$carb[32]"     = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[c(11, 32)]]" = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[11]][32]"    = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
".subset2"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)
)
?microbenchmark
system.time(replicate(100, decisionMatrix(cam4, allUsers, rounds="all", cost_ids = 4)))
system.time(replicate(1, decisionMatrix(cam4, allUsers, rounds="all", cost_ids = 4)))
microbenchmark(
"[32, 11]"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"$carb[32]"     = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[c(11, 32)]]" = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[11]][32]"    = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
".subset2"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)
, times=10)
microbenchmark(
"[32, 11]"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"$carb[32]"     = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[c(11, 32)]]" = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[11]][32]"    = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
".subset2"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)
, times=1)
microbenchmark(
"[32, 11]"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"$carb[32]"     = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[c(11, 32)]]" = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
"[[11]][32]"    = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4),
".subset2"      = decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)
, times=10)
microbenchmark(
"decisionMatrix"= replicate(1, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(1, referencePoints(cam4, allUsers, rounds="all", cost_ids=4)),
"w.diffToIdeal"	= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(1, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(1, overallTRP(cam4, allUsers, rounds="all", cost_ids=4)),
"overallPV"    	= replicate(1, overallTRP(cam4, allUsers, rounds="all", cost_ids=4)),
times=1)
microbenchmark(
"decisionMatrix"= replicate(1, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(1, referencePoints(cam4, allUsers, cost_ids=4)),
"w.diffToIdeal"	= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(1, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(1, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(1, overallTRP(cam4, allUsers, rounds="all", cost_ids=4)),
"overallPV"    	= replicate(1, overallTRP(cam4, allUsers, rounds="all", cost_ids=4)),
times=1)
full.tri.refps
triRefPs <- full.tri.refps
dualRefPs <- full.dual.refps
full.dual.refps
microbenchmark(
"decisionMatrix"= replicate(10, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(10, referencePoints(cam4, allUsers, cost_ids=4)),
"w.diffToIdeal"	= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(10, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps=triRefPs)),
"overallPV"    	= replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, dual.refps=dualRefPs)),
times=1)
microbenchmark(
"decisionMatrix"= replicate(10, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(10, referencePoints(cam4, allUsers, cost_ids=4)),
"w.diffToIdeal"	= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(10, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(10, overallDRP(cam4, allUsers, rounds="all", cost_ids=4, dual.refps=dualRefPs)),
"overallTRP"    = replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps=triRefPs)),
times=10)
microbenchmark(
"decisionMatrix"= replicate(10, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(10, referencePoints(cam4, allUsers, cost_ids=4)),
"w.diffToIdeal"	= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(10, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(10, overallDRP(cam4, allUsers, rounds="all", cost_ids=4, dual.refps=dualRefPs)),
"overallTRP"    = replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps=triRefPs)),
times=1)
microbenchmark(
"decisionMatrix"= replicate(10, decisionMatrix(cam4, allUsers, rounds="all", cost_ids=4)),
"refPoints"     = replicate(10, referencePoints(cam4, allUsers, cost_ids=4)),
"w.diffToIdeal"	= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="differenceToIdeal")),
"w.Entropy" 		= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="entropy")),
"w.H&S" 				= replicate(10, getAttrWeights(cam4, allUsers, rounds="all", cost_ids=4, weightFUN="highAndStandard")),
"overallPV"    	= replicate(10, overallPV(cam4, allUsers, rounds="all", cost_ids=4)),
"overallDRP"    = replicate(10, overallDRP(cam4, allUsers, rounds="all", cost_ids=4, dual.refps=dualRefPs)),
"overallTRP"    = replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps=triRefPs)),
times=5)
save.image("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/oldVariablesDelete.RData")
dim(myData)
system.time(replicate(10, overallTRP(cam4, allUsers, rounds="all", cost_ids=4, tri.refps=triRefPs)))
load("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/oldVariablesDelete.RData")
allUsers
savehistory("C:/Users/diego/Google Drive/KIT/Seminar_eC_HCI/R/productConfig/PerfAnalysisData.Rhistory")
